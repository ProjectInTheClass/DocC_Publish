{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 글에선 Firebase를 이용하여 Instagram을 모방한 앱을 만들어 보겠습니다."},{"type":"text","text":" "},{"type":"text","text":"Firebase는 데이터베이스, 서버 등에 대해 능숙하지 않더라도, 손쉽게 네트워크에 데이터를 저장하고 불러오도록 해줍니다. 이를 이용하여 앱을 만들어 보겠습니다. (Firebase 설치 및, 기본 API에 대한 설명은 "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Firebase_Chat"},{"type":"text","text":"를 참조하길 바랍니다.)"}]},{"anchor":"만들고자-하는-타임-라인","level":2,"type":"heading","text":"만들고자 하는 타임 라인"},{"type":"paragraph","inlineContent":[{"type":"text","text":"먼저 Timeline에 대해 알아보겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instagram에서는 한 명의 사용자가 하나의 Timeline을 가집니다. Timeline은 유저가 팔로우한 모든 사람의 게시글들을 최신 글 순서로 보여줍니다. (2016년 이후로 Instagram은 Timelne을 시간 역행 순으로 보여주지 않고, 맞춤형 피드 알고리즘을 통해 보여줍니다. 여기선 변경 전을 기준으로 얘기하겠습니다)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위 처럼 특정 사용자가 팔로우한 사람들의 게시글만 보여주기 위해선, 사용자를 등록하고 사용자마다 다른 타임라인을 가지도록 해야 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"하지만 "},{"type":"strong","inlineContent":[{"type":"text","text":"이 글은 “이미지를 Firebase Storage에 저장하고 불러오기, 텍스트를 Firebase Database에 저장하고 불러오기”에 초점을 두고 있습니다."}]},{"type":"text","text":" 따라서 실제 Instagram과는 다른 타임라인을 만들겠습니다."}]},{"anchor":"만들어야할-기능","level":2,"type":"heading","text":"만들어야할 기능"},{"type":"paragraph","inlineContent":[{"type":"text","text":"모든 사용자는 같은 하나의 타임라인만을 공유합니다. 따라서 Timeline은 그저 시간순으로 게시글을 보여주는 게시판 역할입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"타임라인의 게시글은 이미지, 텍스트, 게시시간을 담고 있습니다. 이를 통해, 구현해야 할 내용을 정리해 보겠습니다."}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"게시글은 이미지와 텍스트, 게시시간을 담고 있습니다. 이 중에 이미지와 텍스트를 사용자가 올릴 수 있도록 만들어야 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"사용자가 이미지를 올리는 방법도 생각해야 합니다. 이미지는 카메라로 찍어서 올릴 수 있고, 갤러리에서 선택하여 올릴 수 있습니다. 또한, 선택한 이미지를 편집하여 게시할 수 있다면 사용자 입장에서 편리합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"타임라인은 전체 게시글을 보여주지 않습니다. 사용자가 예전 게시글을 보는 경우는 드물기 때문입니다."},{"type":"text","text":" "},{"type":"text","text":"또한, 많은 게시글을 한 번에 불러오는 것은 성능상으로도 좋지 않습니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"따라서 최신\/이전 게시글은 사용자의 스크롤에 따라 불러오도록 해야 합니다."},{"type":"text","text":" "},{"type":"text","text":"최신게시글은 스크롤을 맨 위로 올릴 시 보여주고, 이전게시글은 스크롤을 맨 아래로 내릴 시 보여주도록 합니다."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"먼저, 첫 번째 기능을 위해, Fusuma라이브러리를 이용하겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fusuma 라이브러리는 Instagram과 유사한 방식으로 이미지 게시 할 수 있도록 만들어졌습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fusuma라이브러리를 이용하면 사용자는 한 화면에서 이미지를 선택\/편집이 가능합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"또한, 그 화면에서 바로 카메라로 넘어갈 수도 있습니다. 따라서 첫 번째 기능을 구현하기에 적합하다고 판단하여 이용하였습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(이 글에선 Fusuma를 사용하여 앱을 구현하기 위해 개발이 복잡해진 부분이 있습니다. 라이브러리를 이용하면 부가적으로 복잡해지는 부분도 생기기 때문에, 굳이 Fusuma를 사용하여 구현할 필요는 없습니다. UIImagePickerController로도 구현이 가능합니다)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"두\/세 번째 기능을 위해선, Tableview를 이용하겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tableview를 이용하여 타임라인을 구현하고, 앱 실행 시 게시글은 정해진 개수만 표시합니다. 이전\/최신게시글들은 사용자가 스크롤을 할 경우에만 불러오겠습니다."}]},{"anchor":"Firebase-Database에서-데이터를-읽는-두-가지-방법","level":2,"type":"heading","text":"Firebase Database에서 데이터를 읽는 두 가지 방법"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Firebase Database는 Data를 가져오기 위해, observe()메소드와 observeSingleEvent()메소드를 제공합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"observe()메소드는 앱이 동작하고 있고, 네트워크가 연결되어 있다면 실시간으로 data를 읽어옵니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이와 반대로 observeSingleEvent()메소드는 이 메소드가 호출된 당시에만 data를 읽어 옵니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"우리가 만들 타임라인은 사용자의 스크롤에 의해 게시글을 불러옵니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"따라서 이 글에선 observeSingleEvent()를 이용하여 사용자의 액션에 따라 게시글을 불러올 것이고, 자동 동기화는 구현하지 않습니다. 자동 동기화는 "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/database\/ios\/lists-of-data"},{"type":"text","text":"을 참조하길 바랍니다."}]},{"anchor":"시작하기","level":2,"type":"heading","text":"시작하기"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_timeline1.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"새 프로젝트를 만들고 Timeline이라고 지칭합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"다음과 같이 Data.swift는 일반 swift 파일로, 나머지는 Cocoa Touch Class로 파일을 추가합니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_timeline2.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Main.stoyboard는 위와 같이 설정합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"각각의 오브젝트들은 다음과 같이 설정합니다."}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tab Bar ControllerTab Bar의 Attribute Inspector 내부 image Tint는 Black으로 설정합니다. 이는 현재 선택된 탭 아이콘의 색을 나타냅니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigation ControllerNavigation Bar의 Attribute Inspector 내부 Translucent를 체크해제 합니다. 이는 배경과 무관한 색을 가지게 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tab Bar Item의 Attribute Inspector 내부 selected image, Image를 집 모양으로 설정합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"TimelineTableViewControllerIdentity Inspector 내부 Custom class를 TimelineTableViewController로 지정합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Table View의 Attribute Inspector 내부 content는 Dynamic Prototypes로 지정합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"TimelineCell의 Identity Inspector 내부 Custom class를 TimelineTableViewCell로, Attribute Inspector 내부 Identifier는 TimelineCell로 지정합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"[@IBOutlet] 위 스토리보드에서 3번 컨트롤러의 Image View와 Text Label은 TimelineTableViewCell.swift와 outlet을 연결하고, Footer Label은 TimelineTableViewController.swift와 연결합니다. (적절한 프로퍼티를 만들어 줍니다)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add Navigation Controller2번과 같습니다. 하지만 아이콘은 ‘+’모양으로 설정합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Identity Inspector 내부 Custom class를 AddNavigationController로 지정합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"UploadViewControllerIdentity Inspector 내부 Custom class를 UploadViewController로 지정해 주고, TextView와 ImageView를 추가합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"또한, 코드로 4번과 5번을 연결하기 위해 Identity Inspector 내부 Storyboard ID를 UploadViewController로 지정해 줍니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"[@IBOutlet] 위 스토리보드에서 5번 컨트롤러의 Image View와 Text View는 UploadViewController.swift로 연결합니다. (적절한 프로퍼티를 만들어 줍니다)"}]}]}]},{"anchor":"Podfile-설정","level":4,"type":"heading","text":"Podfile 설정"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_timeline3.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이미지를 저장 하기 위해 Firebase\/Storage, 저장한 이미지를 표시하기 위해 FirebaseUI\/Storage,"},{"type":"text","text":" "},{"type":"text","text":"텍스트를 업로드 하기 위해 Firebase\/Database, 사용자가 이미지를 게시하도록 하기 위해 Fusuma를 이용하도록 하겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"2번째 줄 platform은 버전에 알맞게 설정합니다. Podfile을 위와 같이 설정한 후 ‘pod install’을 실행합니다."}]},{"anchor":"Database-Storage-규칙-infoplist-설정","level":4,"type":"heading","text":"Database, Storage 규칙, info.plist 설정"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_timeline4.png"},{"type":"text","text":" "},{"type":"image","identifier":"firebase_timeline5.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"앱에서 Database, Storage에 접근하기 위해서 임시로 규칙을 공개하도록 합니다."},{"type":"text","text":" "},{"type":"text","text":"( "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/database\/security\/quickstart?hl=ko"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/storage\/security\/start?hl=ko"},{"type":"text","text":")"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"또한 앱이 사진 라이브러리 접근하기 위해선 그 목적을 알려주어야 합니다. 따라서 프로젝트 내부 ‘info.plist’에는 위와 같이 “Privacy- Photo Library Usage Des…” 값을 추가해줍니다."}]},{"anchor":"게시글-데이터","level":4,"type":"heading","text":"게시글 데이터"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Data.swift파일에 게시글 데이터를 구조화합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"사용자가 입력한 메세지를 담을 text, 게시한 상대적 시간을 나타내는 date, 게시글 이미지를 담을 imageView프로퍼티가 있습니다."}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","import UIKit","","let g_NumPerOneLoad = 3 \/\/한 Load에 불러올 게시글의 수","","class Post {","    var text:String \/\/게시글의 내용","    var date:Int    \/\/게시 시간","    var imageView = UIImageView()   \/\/게시 이미지","    ","    init(_ text:String, _ date:Int) {","        self.text = text","        self.date = date","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"여기서 date는 Int타입입니다. 이는 Date.timeIntervalSince1970를 이용하여 1970년 이후의 시간을 숫자로 얻어오기 때문입니다. 비교가 쉽게 하기 위함이므로 여기선 이를 기준으로 진행하겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"생성자는 매개변수마다 앞에 ‘_’를 붙여 인자 이름을 생략할 수 있도록 했습니다."}]},{"anchor":"Fusuma와-Firebase를-이용한-데이터-저장-및-파일-업로드","level":2,"type":"heading","text":"Fusuma와 Firebase를 이용한 데이터 저장 및 파일 업로드"},{"anchor":"이미지-게시과정-살펴보기","level":4,"type":"heading","text":"이미지 게시과정 살펴보기"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_timeline6.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"먼저 이미지를 업로드하기 위해 전체적인 구조를 살펴보겠습니다. 사용자가 Fusuma의 “X”버튼을 누르면 원래 창으로 되돌아 오고, “V”버튼을 누르면 글을 작성할수 있는 창으로 넘어가야 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이를 구현하기 위해선 fusumaWillClosed(), fusumaImageSelected() 메소드를 이용합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"따라서 구현해야 할 것은 **“Close버튼을 누르면 탭을 바꾸어 2번 컨트롤러로인 본래 타임라인으로 돌아가게하기, Select버튼을 누르면 5번 컨트롤러로 가게하기”**입니다."}]},{"anchor":"4번-컨트롤러-AddNavigationController","level":4,"type":"heading","text":"4번 컨트롤러 AddNavigationController"},{"type":"paragraph","inlineContent":[{"type":"text","text":"4번 AddNavigationController.swift부터 보겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"AddNavigationCotroller는 fusuma, uploadController프로퍼티를 가집니다. 여기서 fusuma프로퍼티는 위 사진 가운데에 있는 뷰 컨트롤러 이고, uploadController프로퍼티는 5번 뷰 컨트롤러입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이를 상황에 따라 Navigation Stack에 푸쉬, 팝을 하는 것이 4번 컨트롤러의 역할입니다."}]},{"type":"codeListing","syntax":"swift","code":["import UIKit","import Fusuma","","class AddNavigationController: UINavigationController, FusumaDelegate {","    let fusuma = FusumaViewController() \/\/이미지 선택을 위한 Fusuma컨트롤러","    var uploadController = UploadViewController() \/\/텍스트 입력, 게시글 업로드를 위한 컨트롤러","    let storyBoard = UIStoryboard(name: \"Main\", bundle: nil) \/\/Main.storyboard를 가리킴","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        fusumaTintColor = UIColor.black \/\/전체적으로 흑백톤으로 설정","        fusumaBaseTintColor = UIColor.black","        fusumaBackgroundColor = UIColor.white","        ","        fusuma.delegate = self \/\/FusumaDelegate를 위임받은 self를 fusuma의 delegat으로 해준다.","        fusuma.hasVideo = false","        fusuma.cropHeightRatio = 0.6 \/\/ 세로\/가로 비율","        fusuma.allowMultipleSelection = false","        fusuma.defaultMode = .library","        ","        fusuma.hidesBottomBarWhenPushed = true","        ","        uploadController = storyBoard.instantiateViewController(withIdentifier: \"UploadViewController\") as! UploadViewController                \/\/Main.storyBoard에서 Idetifier가 UploadViewController인 Controller를 가져온다.(시작하기 파트에서 설정했음)","        uploadController.navigationItem.title = \"업로드\"   \/\/uploadController의 타이틀 설정","        ","        self.pushViewController(fusuma, animated: false)    \/\/첫 로드시엔 fusuma만 push하여 보여준다.","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ViewDidLoad는 AddNavigationController가 처음으로 load될 때 수행하는 루틴입니다. fusuma에 대한 설정을 해줍니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"시작하기 부분에서 보았듯 5번 컨트롤러는 연결된 컨트롤러가 없습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"따라서 Main.storyboard로부터 Identity가 UploadViewController인 컨트롤러를 불러옵니다. 이렇게 5번 컨트롤러를 얻어옵니다."}]},{"type":"codeListing","syntax":"swift","code":["override func viewWillAppear(_ animated: Bool) {","        self.isNavigationBarHidden = true   \/\/fusuma가 보여지는 경우 불필요한 NavigationBar를 숨긴다.","        self.popToViewController(fusuma, animated: false)   \/\/AddNavigationController가 나타날시 바로 fusuma가 보이도록 한다.","    }","    override func didReceiveMemoryWarning() {","        super.didReceiveMemoryWarning()","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"fusuma컨트롤러는 위아래에 독자적인 버튼이 있기 때문에, Navigation Bar와 Bottom Bar는 숨겨줍니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그리고 AddNavigationController가 최초 표시될 때 fusuma가 표시되도록 설정합니다."}]},{"type":"codeListing","syntax":"swift","code":["func fusumaImageSelected(_ image: UIImage, source: FusumaMode) {","        uploadController.image = image  \/\/\"V\"버튼 을 누르면 uploadController에 이미지를 넘겨준다.","        self.pushViewController(uploadController, animated: true)   \/\/uploadController를 네비게이션 스택에 push하여 보여준다.","    }","    func fusumaWillClosed() {","        self.tabBarController?.selectedIndex = 0 \/\/탭을 전환하여 본래 타임라인으로 돌아간다.","    }","    ","    \/\/ Return the image but called after is dismissed.","    func fusumaDismissedWithImage(image: UIImage, source: FusumaMode) {","    }","    ","    func fusumaVideoCompleted(withFileURL fileURL: URL) {","    }","    ","    \/\/ When camera roll is not authorized, this method is called.","    func fusumaCameraRollUnauthorized() {","    }","    ","    \/\/ Return selected images when you allow to select multiple photos.","    func fusumaMultipleImageSelected(_ images: [UIImage], source: FusumaMode) {","    }","    ","    \/\/ Return an image and the detailed information.","    func fusumaImageSelected(_ image: UIImage, source: FusumaMode, metaData: ImageMetadata) {","    }","    ","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"fusuma에서 체크버튼(“V”)을 누르면 uploadController에 이미지를 넘겨주고 uploadController를 푸쉬합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이를 통해 5번 컨트롤러가 나타나도록 합니다. close버튼(“X”)을 누르면 탭을 전환하여 2번 컨트롤러로 이동합니다."}]},{"anchor":"5번-컨트롤러-UploadViewController","level":4,"type":"heading","text":"5번 컨트롤러 UploadViewController"},{"type":"paragraph","inlineContent":[{"type":"text","text":"다음으로 텍스트를 게시하는 5번 UploadViewController를 보겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Firebase Database, Firebase Storage에 게시글을 게시하는 역할을 합니다. 프로퍼티들은 다음과 같이 설정합니다."}]},{"type":"codeListing","syntax":"swift","code":["import UIKit","import FirebaseDatabase","import FirebaseStorage","","class UploadViewController: UIViewController, UITextViewDelegate {","    ","    @IBOutlet weak var ImageView: UIImageView!  \/\/이전 탭에서 선택한 이미지를 보여주는 ImageView","    @IBOutlet weak var TextView: UITextView!    \/\/사용자가 글을 작성하는 TextView","    ","    var image = UIImage()   \/\/AddNavigationController에서 넘기는 image를 받을 변수","    let placeHolder = \"하고 싶은 말이 있나요?\"   \/\/아무 글자도 없을 경우 보여주는 placeHolder","    ","    var ref: DatabaseReference? \/\/우리가 사용할 Firebase Database 레퍼런스","    var storageRef:StorageReference?    \/\/우리가 사용할 Firebase Storage 레퍼런스","    override func viewDidLoad() {","        super.viewDidLoad()","        ref = Database.database().reference()   \/\/Firebase Database 루트를 가리키는 레퍼런스","        storageRef = Storage.storage().reference()  \/\/\/\/Firebase Storage 루트를 가리키는 레퍼런스"]},{"type":"codeListing","syntax":"swift","code":["let addButton = UIBarButtonItem(barButtonSystemItem: .add, target: self, action:#selector(uploadPost))                              \/\/ \"+\"버튼이 눌러졌을 경우 uploadPost()를 호출하도록 합니다.","        self.navigationItem.rightBarButtonItem = addButton"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"여기서 UploadViewController의 Navigation Bar button item을 추가합니다. “+”버튼의 역할을 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“action:#selector(uploadPost)”를 통해 이 버튼을 누를 경우 uploadPost()메소드가 호출되도록 지정해 줍니다. uploadPost는 바로 아래 코드를 통해 확인하겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(참고로 Swift Firebase 4.0.0버전부터 FirebaseDatabase, FirebaseStorage 등을 import한 경우에는 앞에 “Firebase”를 생략한 “Database”로 호출 가능합니다.)"}]},{"type":"codeListing","syntax":"swift","code":["\/\/MARK: - ImageView","    override func viewWillAppear(_ animated: Bool) {","        self.navigationController?.isNavigationBarHidden = false    \/\/UploadViewController가 보여지는 경우에는 NavigationBar표시","        self.ImageView.image = image    \/\/AddNavigationController가 넘겨준 이미지를 ImageView에 표시","    }","    override func viewWillDisappear(_ animated: Bool) {","        self.navigationController?.isNavigationBarHidden = true \/\/UploadViewController가 사라지면, NavigationBar를 숨긴다. (다음 차례에 fusuma가 보일때 NavigationBar를 미리 숨기기 위해)","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"앞서 4번 컨트롤러 설정시, fusuma가 보여지는 경우에는 Navigation Bar를 숨겼었습니다. 하지만 UploadViewController가 나타난 경우에는 필요하므로 표시하도록 합니다. 또한 AddNavigationController.swift에서 fusumaImageSelected()가 호출 될경우, uploadController.image에 이미지를 넣어 주었습니다. 이를 imageView프로퍼티에 넣어줍니다."},{"type":"text","text":" "},{"type":"text","text":"뷰가 사라질때는 Navigation Bar를 다시 숨기도록하여, fusuma가 나타날시 Navigation Bar가 보이지 않도록 합니다."}]},{"type":"codeListing","syntax":"swift","code":["@objc func uploadPost(){","        var curRef = self.ref?.child(\"posts\").childByAutoId()   \/\/Database 루트 아래 posts 아래 새로운 게시글을 참조한다","        if self.TextView.text != placeHolder{   \/\/PlaceHolder 유무에 따른 글 업로드","            curRef?.child(\"text\").setValue(self.TextView.text) \/\/PlaceHolder와 같을 때 새로운 게시글의 text를 self.TextView.text로 지정","        }else{  ","            curRef?.child(\"text\").setValue(\"\")  \/\/PlaceHolder와 같을 때 새로운 게시글의 text를 빈 텍스트로 지정","        }   ","        ","        self.TextView.text = \"\" \/\/한 번 업로드 한 경우 다음 차례에 UploadViewController가 표시될 때 빈 텍스트가 보이도록 한다.","        textViewDidEndEditing(TextView) \/\/~~~~~~PlaceHolder를 위한 설정","        ","        let date = Date()","        let IntValueOfDate = Int(date.timeIntervalSince1970)    \/\/1970년대 이후부터 현재까지 흐른 시간을 숫자하나로 얻음","        curRef?.child(\"date\").setValue(\"\\(IntValueOfDate)\") \/\/  새로운 게시글의 date를 IntValueOfDate로 업로드","        ","        let imageRef = storageRef?.child((curRef?.key)!+\".jpg\") \/\/Firebase Storage 루트에 \"curRef?.key+.jpg\"에 해당하는 참조를 만든다.","        ","        guard var uploadData = UIImageJPEGRepresentation(self.image, 0.1) else{                                                                         \/\/image변수가 가진 이미지를 JPEG형식으로 변환하고 uploadData에 저장한다.","            return","        }","        imageRef?.putData(uploadData, metadata: nil, completion:{ metadata, error in                                                                        \/\/\"curRef?.key+.jpg\"로 설정된 참조에 jpeg로 변환된 이미지를 업로드한다.","            if let error = error {","                \/\/ 에러 발생","            } else {","                \/\/ Metadata는 size, content-type, download URL과 같은 컨텐트의 메타데이터를 가진다","            }","        })","        self.tabBarController?.selectedIndex = 0    \/\/탭을 전환하여 본래 타임라인으로 돌아간다.","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"uploadPost()메소드를 이용하여 데이터를 저장하고 파일을 업로드합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Firebase Database에 data를 저장하는 것은 간단합니다. (77)줄과 같이 새로운게시글에 대한 참조변수를 설정하고, 그 참조변수를 이용하여 setValue()메소드를 호출하면 됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"참조변수를 설정하는 과정은 다음과 같습니다."}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"21번줄에서 선언한 ref를 26번줄에서 Database의 루트로 지정해줍니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"루트 아래 posts 자식을 얻어오고, posts 아래에 AutoID(임의의 ID)로 새로운 게시글을 참조합니다."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"해당 참조변수에 데이터를 저장하는 과정은 다음과 같습니다."}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"해당 참조변수 아래에 text라는 key를 가진 child를 만듭니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"“text” key를 가진 child의 value로 self.TextView.text를 넣어 줍니다."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"다만 저장시에 유의할 점은 Firebase Database의 data는 key,value페어로 이루어져 있으며 모두 String이라는 것입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이를 이용하여 먼저 text를 placeHolder의 유무에 따라 업로드 합니다. placeHolder로 text가 설정되어 있다는 의미는 사용자가 아무런 글자도 입력하지 않았다는 의미입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"따라서 placeHolder로 text가 설정되어있을 경우에는 빈 글자를 업로드 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"date는 1970년대 이후흐른시간을 숫자로 얻어 오고 Database에 저장합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"image는 Storage에 업로드합니다. "},{"type":"strong","inlineContent":[{"type":"text","text":"Firebase Storage에 data를 저장하는 것 또한 간단합니다. storageRef.child([filename])메소드를 이용하여 루트에 저장할 filename의 참조를 얻어 오고 해당하는 참조에 업로드하면 됩니다."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"여기서 주의해야 할 점은 앱 내의 image를 바로 Firebase Storage에 저장할 수 없다는 것입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Firebase Storage에 앱 내의 image인스턴스를 업로드 하기 위해선 JPEG형식으로 바꾸어 주어야만 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"따라서 다음과 같이 합니다."}]},{"type":"codeListing","syntax":"swift","code":["let imageRef = storageRef?.child((curRef?.key)!+\".jpg\") \/\/Firebase Storage 루트에 \"curRef?.key+.jpg\"에 해당하는 참조를 만든다."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“(curRef?.key)!+.’jpg’로 참조를 만듭니다. 이 이름이 Firebase Storage에 저장될 파일 이름이 됩니다. (77)에서 “childByAutoId()로 생성된 “curRef?.key”는 항상 고유한 값이므로 중복이 없습니다. 따라서 이것으로 파일이름을 정하는것이 적합합니다."}]},{"type":"codeListing","syntax":"swift","code":["guard var uploadData = UIImageJPEGRepresentation(self.image, 0.1) "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이미지를 JPEG형식으로 바꾸어 줍니다."}]},{"type":"codeListing","syntax":"swift","code":["imageRef?.putData(uploadData, metadata: nil, completion:{ metadata, error in                                                                        \/\/\"curRef?.key+.jpg\"로 설정된 참조에 jpeg로 변환된 이미지를 업로드한다.","            if let error = error {","                \/\/ 에러 발생","            } else {","                \/\/ Metadata는 size, content-type, download URL과 같은 컨텐트의 메타데이터를 가진다","            }","        })","        self.tabBarController?.selectedIndex = 0    \/\/탭을 전환하여 본래 타임라인으로 돌아간다."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"JPEG형식으로 바꾼 파일을 업로드합니다."}]},{"anchor":"3번-컨트롤러-TimelineTableViewController","level":2,"type":"heading","text":"3번 컨트롤러 TimelineTableViewController"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제 게시글을 표시하기 위해 TimelineTableViewController.swift를 작성하겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"먼저 필요한 라이브러리를 모두 import하고, 프로퍼티들을 선언 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"테이블 뷰에 표시될 포스트들을 담을 배열을 선언하고, Firebase에서 로드된 포스트를 따로 담을 배열도 선언합니다. 이 배열들은 모두 Data.swift에서 정의한 Post타입 입니다. 따라서 각각의 원소들이 text, image date를 가집니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"posts와 loadedPosts를 따로 둔 것은 뒤에서 loadPosts()메소드와 함께 설명하도록 하겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"최신글을 불러 들이기 위해선 UITableViewController에 기본적으로 있는 refreshControl을 이용합니다. refreshControl은 인스턴스를 할당만 해주면됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 경우 테이블뷰의 스크롤을 맨 위로 올리면 refreshControl은 자동으로 나타납니다. 하지만 이에 대한 액션은 직접 구현해야 합니다."}]},{"type":"codeListing","syntax":"swift","code":["import UIKit","import FirebaseDatabase","import FirebaseStorage","import FirebaseStorageUI","","class TimelineTableViewController: UITableViewController {","    ","    var ref:DatabaseReference?","    var storageRef:StorageReference?","    ","    var posts = [Post]()                \/\/테이블 뷰에 표시될 포스트들을 담는 배열","    var loadedPosts = [Post]()          \/\/Firebase에서 로드된 포스트들","    ","    @IBOutlet weak var FooterLabel: UILabel!    \/\/loading..메세지를 표시할 라벨","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        ref = Database.database().reference()    \/\/Firebase Database 루트를 가리키는 레퍼런스","        storageRef = Storage.storage().reference()    \/\/Firebase Storage 루트를 가리키는 레퍼런스","        ","        loadPosts()     \/\/Firebase에서 포스트들을 불러들임","        ","        refreshControl = UIRefreshControl()         \/\/최신글을 불러 들이기 위한 refreshControl","        refreshControl?.attributedTitle = NSAttributedString(string: \"Pull to refresh\")","        refreshControl?.addTarget(self, action: #selector(TimelineTableViewController.refresh), for: UIControlEvents.valueChanged)              \/\/refreshControl이 호출 될경우 TimelineViewController.refresh()가 호출 되도록한다.","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"addTarget()메소드 안 action 매개변수에 지정된 메소드를 넘겨주어 refreshControl이 나타날 경우의 액션을 구현합니다."}]},{"anchor":"테이블-뷰-Section-Row-Cell-설정","level":4,"type":"heading","text":"테이블 뷰 Section, Row, Cell 설정"},{"type":"codeListing","syntax":"swift","code":["\/\/ MARK: - Table view data source","    override func numberOfSections(in tableView: UITableView) -> Int {","        return 1    \/\/섹션은 하나","    }","    ","    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {","        return self.posts.count \/\/row의 수는 post의 수만큼","    }","    ","    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {","        let cell = tableView.dequeueReusableCell(withIdentifier: \"TimelineCell\", for: indexPath) as! TimelineTableViewCell                          \/\/TimelineCell ID에 해당하는 TableViewCell을 얻어오고 TimelineTableViewCell로 캐스팅한다. 이를 cell에 할당한다.","        let post = posts[indexPath.row]","        cell.TextLabel.text = post.text","        cell.ImageView.image = post.imageView.image","        ","        return cell","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Section의 갯수는 하나로 하고, Row는 posts의 수만큼 지정합니다. posts는 현재 보여지고 있는 게시글들 입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"cell은 TimelineTableViewCell로 캐스팅하여 얻어옵니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"row에 해당하는 포스트를 읽어와 읽어온 포스트의 text와 image를 cell의 text와 image로 할당합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"TimelineTableViewCell안에는 시작하기 3번파트에서 Outlet을 연결해 주었던 Image View와 Text Label 프로퍼티가 들어있습니다."}]},{"anchor":"데이터-검색-및-파일-다운로드-loadPosts메소드","level":4,"type":"heading","text":"데이터 검색 및 파일 다운로드 – loadPosts()메소드"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제 본격적으로 Firebase로 부터 저장된 포스트들을 읽어 오겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 부분은 “데이터 저장”처럼 간단하지는 않습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위 그림은 Firebase로 부터 데이터를 읽어오는 과정을 나타낸 것이며 다음과 같은 내용입니다."}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"TimelineTableViewController가 처음 load되면(viewDidLoad), loadPosts()메소드를 호출합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"loadPosts 메소드에선 어떤 데이터를 원하는지를 나타낸 Query를 작성합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"이 Query를 바탕으로 Firebase로 부터 데이터를 얻어옵니다. Query.observeSingleEvent()가 데이터를 얻어오는 역할을 해줍니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"observeSingleEvent()메소드를 통해 Firebase의 데이터를 Snapshot으로 얻어옵니다. 실시간으로 변하는 Database의 상태를 순간캡쳐하여 나타낸것이 snapshot입니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"이 Snapshot은 “DataSnapshot”타입이므로 이를 Post타입으로 변환해 줍니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"각각 얻어온 post들을 loadedPosts프로퍼티에 저장하며, 이 중 가장 최근 게시글 중 일부만 posts프로퍼티에 저장합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"3번 컨트롤러 TimelineTableViewController는 이 posts의 정보를 읽어오고, 타임라인에 표시합니다."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이것이 구현된 loadPosts()메소드를 살펴보겠습니다"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ MARK: -  Load posts","    func loadPosts(){","        var orderedQuery:DatabaseQuery?","        orderedQuery = ref?.child(\"posts\").queryOrdered(byChild: \"date\")   \/\/\"date\"기준으로 정렬된 posts를 얻는 질의를 작성  "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"**Firebase Database로 부터 데이터를 읽어 오기 위한 Query를 작성합니다. ‘나는 이런 데이터를 원해’**를 나타냅니다."}]},{"type":"codeListing","syntax":"swift","code":["orderedQuery?.observeSingleEvent(of: .value, with: { (snapshot) in  \/\/이 line이 호출되는 시점에 snapshot을 얻어온다.","            var snapshotData = snapshot.children.allObjects \/\/\"DataSnapshot\"타입에서 [Any] 데이터를 얻어옴","            snapshotData = snapshotData.reversed()  \/\/오름차순을 내림차순으로 바꿈"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"만들어 놓은 쿼리를 통해 데이터를 가져옵니다. 가져오고자 하는 Firebase의 데이터들은 snapshot타입으로 얻을 수 있습니다. snapshot은 기본적으로 key, value, child들을 갖습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"얻은 snapshot은 모든 posts를 담고 있으며, 이 snapshot이 가지고있는 posts들의 순서가 곧 date순으로 정렬된 게시글들 입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"정렬된 순서를 유지하기 위해, 이것을 배열로 바꾸겠습니다. 실행 하면 snapshotData는 date순으로 정렬된 모든 posts를 담게됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 때 snapshotData는 “Any”타입의 배열입니다. “snapshot.children.allObjects”를 통해 얻은 데이터는 [Any]입니다. 데이터를 가져왔지만 타입을 모르기 때문에 이를 알맞게 변형해줘야 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"하지만 이렇게 .queryOrdered(byChild: “date”) 쿼리를 통해 얻은 데이터들은 오름차순이기 때문에 reversed()를 이용하여 내림차순으로 바꾸어 줍니다."}]},{"type":"codeListing","syntax":"swift","code":["for anyDatum in snapshotData{   \/\/snapshotData의 각각의 원소를 알맞게 처리","                let snapshotDatum = anyDatum as! DataSnapshot                                                                                                           \/\/ Any타입으로 변형된 DataSnapshot을 다시 DataSnapshot타입으로 변형, 여기서 snapshotDatum은 한 post를 담고 있다","                let dicDatum = snapshotDatum.value as! [String:String]  \/\/post의 value, 즉 [text:~~, date:~~]를 얻어옴","                if let text = dicDatum[\"text\"],","                    let date = Int(dicDatum[\"date\"]!){","                    let post = Post(text,date)  \/\/얻어온 데이터로 부터 Post생성"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"snapshotData 배열 안에 있는 원소들은 “Any”타입 이므로 접근이 어렵습니다. 따라서 이를 DataSnapshot타입으로 다시 바꾸어 줍니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제 for문이 처음 실행 될때에 snapshotDatum안에는 가장 최근 게시글이 들어있고, 그 다음부터는 바로 이전 게시글을 불러옵니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"snapshotDatum.key안에는 AutoId가, snapshotDatum.value안에는 text, date를 키로 갖는 딕셔너리 데이터들이 들어있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 데이터로 부터 Post를 생성해줍니다. 이제 image를 제외한 정보를 Firebase Database에서 다 가져왔습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(참고로 for문안에서 생성된 post 인스턴스가 사라지지 않으려면 class타입이어야만 합니다.)"}]},{"type":"codeListing","syntax":"swift","code":["\/\/Get Image","                    let imageRef = self.storageRef?.child(\"\\(snapshotDatum.key).jpg\")   \/\/앞에서 저장한 파일이름을 그대로 참조한다.(snapshotDatum.key를 이용하여 참조변수를 할당)","                    post.imageView.sd_setImage(with: imageRef!, placeholderImage: UIImage(), completion:{(image,error,cacheType,imageURL) in self.tableView.reloadData() })                                                                                                         \/\/설정한 참조로 부터 이미지를 읽어온다. placeholderImage는 다운로드가 완료되기 전에 표시될 이미지. 이미지를 다 불러왔다면 Tableview를 갱신한다. ","                        ","                    self.loadedPosts += [post]  \/\/앞에서 Firebase로부터 얻어온 데이터를 post에 모두 옮겼고, 이를 loadedPosts에 저장","                }","            }","                                                            ","            self.posts += self.loadedPosts.prefix(g_NumPerOneLoad)  \/\/loadedPosts에서 일부만 posts에 저장","            self.tableView.reloadData() \/\/posts가 변하였으므로 tableView를 reload","        })","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Firebase Storage로 부터 Image를 가져옵니다. 이미지를 가져오기 위해선 파일이름을 알아야 합니다. 그리고 이 파일이름은 Firebase Database에 저장되어 있습니다. 이는 5번 UploadViewController에서 Image파일 업로드시 post의 키로 파일이름을 설정 했기 때문입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"우리는 위에서 Firebase Database에서 post를 얻어왔고, 그 post의 키를 통해 파일이름을 알아낼 수 있습니다. snapshotDatum.key가 해당하는 파일이름을 가지고 있습니다. 따라서 이에 “.jpg”를 더하면 Storage로부터 파일을 읽을 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"FirebaseStorageUI를 import하면, UIImageView안에 sd_setImage()메소드가 생기게 되며, 이를 이용하여 구현 할 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"가져온 이미지를 post에 넣어 둡니다. 다운로드 받을 레퍼런스와, 다운로드가 완료되기 전의 이미지를 매개변수로 받아, 이미지를 가져와 줍니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"for루프 안에서 만든 post는 Firebase에서 불러온 정보를 모두 담고 있습니다. 이 post들을 loadedPosts에 모두 저장합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그 중에 일부만 posts에 저장합니다. 현재 테이블에 표시된 게시글을 나타내는 posts의 내용이 변하였으므로 tableView로 reload를 해줍니다. 이 부분으로 인해 앱 처음 실행시 특정갯수의 게시글만 보여집니다."}]},{"anchor":"최신게시글-검색-refresh-loadFreshPosts메소드","level":4,"type":"heading","text":"최신게시글 검색 – refresh(), loadFreshPosts()메소드"},{"type":"codeListing","syntax":"swift","code":["refreshControl?.addTarget(self, action: #selector(TimelineTableViewController.refresh), for: UIControlEvents.valueChanged)              \/\/refreshControl이 호출 될경우 TimelineViewController.refresh()가 호출 되도록한다."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"앞서 33줄에서 refreshControl의 액션으로 refresh()메소드를 설정했습니다. 이제 테이블 뷰 스크롤을 맨 위로 올리면 원형아이콘이 뱅글뱅글 도는 refresh 뷰가 표시됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 경우 새로운 게시글을 불러오고 표시해야 합니다. 새로운 게시글을 표시하는 것은 가장 최근 게시글까지 표시해야하므로, 불러오는 갯수에 제한이 없습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"동작을 refresh()메소드에서 구현합니다. refresh()메소드에서는 loadFreshPosts()메소드를 호출하여 새로운 게시글을 불러오게합니다."}]},{"type":"codeListing","syntax":"swift","code":["func refresh(){","        print(\"refresh\")","        self.loadFreshPosts()","        self.refreshControl?.endRefreshing()","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"loadFreshPosts()메소드는 loadPosts()메소드와 거의 동일하니 다른 부분만 살펴보겠습니다."}]},{"type":"codeListing","syntax":"swift","code":["func loadFreshPosts(){","        var filteredQuery:DatabaseQuery?","        if let latestDate = self.posts.first?.date{ \/\/ posts의 first, 즉 첫 번째 게시글이 존재할 경우","            filteredQuery = ref?.child(\"posts\").queryOrdered(byChild: \"date\").queryStarting(atValue: \"\\(latestDate + 1)\") ","            \/\/첫 번째 게시글보다 date숫자가 큰 posts들만 얻어오는 질의를 작성한다.","        }else{  \/\/첫번째 게시글이 없을 경우","            filteredQuery = ref?.child(\"posts\").queryOrdered(byChild: \"date\").queryStarting(atValue: \"\\(0)\")   ","            \/\/모든 posts들을 얻어오는 질의를 작성한다.            ","        }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"현재 posts중에서 가장 최신의 게시글을 찾고, 그 최신게시글의 date 즉 latestDate를 얻어옵니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"DatabaseQuery.queryStarting(atValue:) 메소드를 이용하여 latestDate보다 Date숫자가 큰 post들을 Firebase로 부터 얻어옵니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"단 Firebase Database에 저장되는 값들은 전부 String타입 이므로 “atValue:” 인자에는 String타입으로 변환된 “latestDate+1″이 들어가야 합니다."}]},{"type":"codeListing","syntax":"swift","code":["filteredQuery?.observeSingleEvent(of: .value, with: { (snapshot) in","            var snapshotData = snapshot.children.allObjects","            snapshotData = snapshotData.reversed()","            ","            var freshPostsChunk = [Post]()","            ","            for anyDatum in snapshotData{","                let snapshotDatum = anyDatum as! DataSnapshot","                let dicDatum = snapshotDatum.value as! [String:String]","                if let text = dicDatum[\"text\"],","                    let date = Int(dicDatum[\"date\"]!){","                    let post = Post(text,date)","                    ","                    \/\/Get Image from URL","                    let imageRef = self.storageRef?.child(\"\\(snapshotDatum.key).jpg\")","                    post.imageView.sd_setImage(with: imageRef!, placeholderImage: UIImage(), completion:{(image,error,cacheType,imageURL) in self.tableView.reloadData() })                                                                                                         \/\/설정한 참조로 부터 이미지를 읽어온다. placeholderImage는 다운로드가 완료되기 전에 표시될 이미지","                    ","                    freshPostsChuck += [post]","                        ","                }","            }","            self.loadedPosts.insert(contentsOf: freshPostsChunk, at: 0)","            self.posts.insert(contentsOf: freshPostsChunk, at: 0)","            self.tableView.reloadData()","        })","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"새로 불러들인 최근 게시글들은 freshPostsChunk에 담아둡니다. freshPostsChunk는 이미 최신게시글 순으로 정렬되어 있습니다. 이 순서 그대로 freshPostsChunk를 loadedPosts, posts 배열 맨 앞에 삽입합니다."}]},{"anchor":"이전게시글-검색-scrollViewDidScroll-loadPastPosts메소드","level":4,"type":"heading","text":"이전게시글 검색 – scrollViewDidScroll(), loadPastPosts()메소드"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Timeline앱은 스크롤을 맨 아래로 내리면 이전게시글을 불러옵니다. UITableViewController는 기본적으로 UIScrollViewDelegate를 위임받습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"우리는 이 내부에 scrollViewDidScroll()메소드를 이용하여 이전게시글 검색을 구현합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"다음과 같은 과정을 통해 스크롤이 contentSize를 넘어감을 체크하고, 넘거가게 되면 이전게시글을 불러오도록 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"loadPastPosts()메소드를 호출하여 이전게시글을 불러옵니다."}]},{"type":"codeListing","syntax":"swift","code":["override func scrollViewDidScroll(_ scrollView: UIScrollView) {","        let  height = scrollView.frame.size.height","        let contentYoffset = scrollView.contentOffset.y","        let distanceFromBottom = scrollView.contentSize.height + self.FooterLabel.frame.height - contentYoffset","        if distanceFromBottom < height {","            print(\" you reached end of the table\")","            loadPastPosts()","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"loadPastPosts()메소드에서는 앱 실행시 불러왔던 이전게시글들을 g_NumPerOneLoad개 만큼 불러옵니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"로딩 중임을 보여주기 위해 대기시간 sleep(1)을 넣도록 합니다. 고성능이 요구된다면 sleep(1)을 빼도록 합니다."}]},{"type":"codeListing","syntax":"swift","code":["func loadPastPosts(){","        let pastPosts = self.loadedPosts.filter{$0.date < (self.posts.last?.date)!}","        let pastChunkPosts = pastPosts.prefix(g_NumPerOneLoad)","        ","        if pastChunkPosts.count > 0{","            self.posts += pastChunkPosts","            sleep(1)","            self.tableView.reloadData()","        }"]},{"anchor":"마치며","level":2,"type":"heading","text":"마치며"},{"type":"paragraph","inlineContent":[{"type":"text","text":"지금까지 Firebase를 이용하여 Instagram과 같은 타임라인을 만드는 방법을 배웠습니다. 이것을 기본으로 하여 다른 다양한 방식의 타임라인을 만들어보세요."},{"type":"text","text":" "},{"type":"text","text":"전체 소스는 "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/PBW99\/ex-Timeline"},{"type":"text","text":"에서 확인하실 수 있습니다."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/codershighdocument\/article_firebase_timeline"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Firebase_Timeline","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Posted: 2018.01.13 | By: Byoungwook Park"}],"kind":"article","metadata":{"roleHeading":"Article","title":"Firebase를 이용하여 Timeline만들기","role":"article","modules":[{"name":"CodersHighDocument"}]},"hierarchy":{"paths":[["doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument"]]},"seeAlsoSections":[{"title":"Tech Blog","identifiers":["doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_UISearchController","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Tag_Cloud","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Naver_API","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Create_PlaygroundBook","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Firebase_Chat","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Calendar_Vot","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_ReplayKit"],"generated":true}],"references":{"firebase_timeline3.png":{"alt":"Image","type":"image","identifier":"firebase_timeline3.png","variants":[{"url":"\/images\/firebase_timeline3.png","traits":["1x","light"]}]},"firebase_timeline6.png":{"alt":"Image","type":"image","identifier":"firebase_timeline6.png","variants":[{"url":"\/images\/firebase_timeline6.png","traits":["1x","light"]}]},"doc://CodersHighDocument/documentation/CodersHighDocument":{"role":"collection","title":"CodersHighDocument","abstract":[{"type":"text","text":"CodersHigh Document에 오신 것을 환영합니다!"},{"type":"text","text":" "},{"type":"text","text":"이곳에서는 CodersHigh에서 제작한 다양한 Article과 Tutorial을 확인할 수 있습니다."}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument","kind":"symbol","type":"topic","url":"\/documentation\/codershighdocument"},"https://firebase.google.com/docs/storage/security/start?hl=ko":{"title":"Storage 규칙","titleInlineContent":[{"type":"text","text":"Storage 규칙"}],"type":"link","identifier":"https:\/\/firebase.google.com\/docs\/storage\/security\/start?hl=ko","url":"https:\/\/firebase.google.com\/docs\/storage\/security\/start?hl=ko"},"https://firebase.google.com/docs/database/security/quickstart?hl=ko":{"title":"Database 규칙","titleInlineContent":[{"type":"text","text":"Database 규칙"}],"type":"link","identifier":"https:\/\/firebase.google.com\/docs\/database\/security\/quickstart?hl=ko","url":"https:\/\/firebase.google.com\/docs\/database\/security\/quickstart?hl=ko"},"firebase_timeline5.png":{"alt":"Image","type":"image","identifier":"firebase_timeline5.png","variants":[{"url":"\/images\/firebase_timeline5.png","traits":["1x","light"]}]},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Create_PlaygroundBook":{"role":"article","title":"플레이그라운드 북 만들기","abstract":[{"type":"text","text":"Posted: 2018.03.18 | By: 윤성관"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Create_PlaygroundBook","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_create_playgroundbook"},"https://firebase.google.com/docs/database/ios/lists-of-data":{"title":"iOS에서 데이터 검색","titleInlineContent":[{"type":"text","text":"iOS에서 데이터 검색"}],"type":"link","identifier":"https:\/\/firebase.google.com\/docs\/database\/ios\/lists-of-data","url":"https:\/\/firebase.google.com\/docs\/database\/ios\/lists-of-data"},"firebase_timeline2.png":{"alt":"Image","type":"image","identifier":"firebase_timeline2.png","variants":[{"url":"\/images\/firebase_timeline2.png","traits":["1x","light"]}]},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_UISearchController":{"role":"article","title":"UISearchController로 검색 개발하기","abstract":[{"type":"text","text":"Posted: 2019.01.14 | By: Quino0627 (dongwook627@gmail.com)"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_UISearchController","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_uisearchcontroller"},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Naver_API":{"role":"article","title":"네이버 오픈 API를 이용한 영화 검색 애플리케이션 만들기","abstract":[{"type":"text","text":"Posted: 2018.08.20 | By: Sujin Kim (gfsusan@naver.com)"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Naver_API","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_naver_api"},"firebase_timeline1.png":{"alt":"Image","type":"image","identifier":"firebase_timeline1.png","variants":[{"url":"\/images\/firebase_timeline1.png","traits":["1x","light"]}]},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Tag_Cloud":{"role":"article","title":"3d 스크롤이 가능한 태그 클라우드 만들기","abstract":[{"type":"text","text":"Posted: 2018.09.05 | By: 김소연 (github.com\/aa9390)"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Tag_Cloud","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_tag_cloud"},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_ReplayKit":{"role":"article","title":"ReplayKit을 이용해 여행 떠나기","abstract":[{"type":"text","text":"Posted: 2017.03.15 | By: Junyeong Yoo"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_ReplayKit","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_replaykit"},"firebase_timeline4.png":{"alt":"Image","type":"image","identifier":"firebase_timeline4.png","variants":[{"url":"\/images\/firebase_timeline4.png","traits":["1x","light"]}]},"https://github.com/PBW99/ex-Timeline":{"title":"Github","titleInlineContent":[{"type":"text","text":"Github"}],"type":"link","identifier":"https:\/\/github.com\/PBW99\/ex-Timeline","url":"https:\/\/github.com\/PBW99\/ex-Timeline"},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Calendar_Vot":{"role":"article","title":"메시지 익스텐션을 이용한 Calendar-Vot 제작기","abstract":[{"type":"text","text":"Posted: 2017.03.17 | By: 염혜리(yhr7518@gmail.com)"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Calendar_Vot","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_calendar_vot"},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Firebase_Chat":{"role":"article","title":"Firebase를 이용하여 채팅창 만들기","abstract":[{"type":"text","text":"Posted: 2017.06.17 | By: Hyunsoo Park"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Firebase_Chat","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_firebase_chat"}}}