{"seeAlsoSections":[{"title":"New Updated","identifiers":["doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_SwiftUI_State_Binding","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_WWDC_Topics","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_CodersHigh_Projects"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"SwiftUI"}]},{"type":"text","text":"에서 "},{"type":"strong","inlineContent":[{"type":"text","text":"프로퍼티 래퍼"}]},{"type":"text","text":"(property wrapper)는,"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"변경될 수 있는 데이터 값 또는 객체에 대해서 변경 사항을 관찰하거나 변경할 수 있도록 해줍니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":" "}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이번 아티클에서는 SwiftUI에서 기본적으로 제공하는 프로퍼티 래퍼 중,"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"@StateObject"}]},{"type":"text","text":"와 "},{"type":"strong","inlineContent":[{"type":"text","text":"@ObservedObject"}]},{"type":"text","text":"에 대해 알아봅시다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"둘은 "},{"type":"strong","inlineContent":[{"type":"text","text":"ObservableObject"}]},{"type":"text","text":" 프로토콜을 준수하는 클래스를 다루는 데에 사용되는 프로퍼티 래퍼입니다."}]},{"anchor":"ObservableObject-프로토콜","level":2,"type":"heading","text":"ObservableObject (프로토콜)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"자신을 준수하는 클래스에서 "},{"type":"strong","inlineContent":[{"type":"text","text":"@Published"}]},{"type":"text","text":" 속성으로 선언된 변수를 관찰합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그리고 "},{"type":"strong","inlineContent":[{"type":"text","text":"@Published"}]},{"type":"text","text":" 속성 변수 값이 변경될 때, 해당 변수에 접근하는 뷰를 업데이트하죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"여기서 ObservableObject 프로토콜을 준수하는 객체를 "},{"type":"strong","inlineContent":[{"type":"text","text":"Observable Object"}]},{"type":"text","text":"라고 합니다."}]},{"type":"codeListing","syntax":"swift","code":["class ViewModel: ObservableObject {","","    @Published var text: String = \"기존 텍스트\"","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"여기 "},{"type":"codeVoice","code":"ViewModel"},{"type":"text","text":" 이라는 이름의 클래스는 Observable Object 입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그렇기 때문에 @Published 속성으로 선언된 text 변수의 값이 변경될 때, text 변수에 접근하는 뷰를 업데이트하게 될 겁니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그렇다면 뷰에서 이 "},{"type":"codeVoice","code":"ViewModel"},{"type":"text","text":" 객체에서 접근하고 싶다면(값을 불러오거나 변경하고 싶다면) 어떻게 해야 할까요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이때 바로 "},{"type":"strong","inlineContent":[{"type":"text","text":"@StateObject"}]},{"type":"text","text":"와 "},{"type":"strong","inlineContent":[{"type":"text","text":"@ObservedObject"}]},{"type":"text","text":" 가 등장합니다. 🌟"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"하나씩 살펴보도록 하겠습니다."}]},{"anchor":"StateObject","level":2,"type":"heading","text":"@StateObject"},{"type":"paragraph","inlineContent":[{"type":"text","text":"@StateObject는 Observable Object를 인스턴스화합니다."}]},{"type":"codeListing","syntax":"swift","code":["struct MainView: View {","    @StateObject var viewModel = ViewModel() ","","    var body: some View {","        VStack {","            Text(viewModel.text)","            Button(\"Change Text\") {","                viewModel.text = \"변경된 텍스트\"","            }","        }  ","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"예시 코드를 보면 "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":"가 "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" 프로토콜을 준수하는 "},{"type":"codeVoice","code":"ViewModel"},{"type":"text","text":"를 인스턴스화하고 있는 것을 확인할 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Chage Text 버튼을 누르면 viewModel의 text 값이 "},{"type":"emphasis","inlineContent":[{"type":"text","text":"“기존 텍스트”"}]},{"type":"text","text":" 에서 "},{"type":"emphasis","inlineContent":[{"type":"text","text":"“변경된 텍스트”"}]},{"type":"text","text":" 로 변하겠죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"text는 "},{"type":"codeVoice","code":"viewModel"},{"type":"text","text":"에서 @Published 속성으로 선언되어 있기 때문에, 값이 변경됨과 동시에 "},{"type":"codeVoice","code":"MainView"},{"type":"text","text":"도 업데이트될 겁니다."}]},{"anchor":"ObservedObject","level":2,"type":"heading","text":"@ObservedObject"},{"type":"paragraph","inlineContent":[{"type":"text","text":"@StateObject와 매우 유사해서, 처음에는 구분하기 어려울 지도 모릅니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위의 @StateObject 예시 코드에서 @StateObject 자리에 @ObservedObject를 넣어도 별 문제가 없을 정도죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그렇다면 어떤 점이 다른 걸까요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"@StateObject는 View가 얼마나 초기화되는지, 즉 View의 라이프 사이클과는 상관 없이 별개의 객체로 관리됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"하지만 @ObservedObject는 관찰하는 객체가 변경될 때마다 뷰를 "},{"type":"strong","inlineContent":[{"type":"text","text":"무효화"}]},{"type":"text","text":", 즉 뷰를 다시 그리지요."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이런 차이점 때문에 @ObservedObject을 사용하면 종종 문제가 생길 수 있는데요."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"여기 viewModel이 @ObservedObject로 선언된 MainView가 있습니다."}]},{"type":"codeListing","syntax":"swift","code":["struct MainView: View {","    @ObservedObject var viewModel = ViewModel() ","","    var body: some View {","        VStack {","            Text(viewModel.text)","            Button(\"Change Text\") {","                viewModel.text = \"변경된 텍스트\"","            }","        }  ","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"만약 MainView가 어떤 부모 뷰에 속한다면 어떨까요? 부모 뷰의 body가 업데이트 된다면요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"MainView의 text가 다시 "},{"type":"emphasis","inlineContent":[{"type":"text","text":"“기존의 텍스트”"}]},{"type":"text","text":" 로 돌아갑니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"부모뷰의 body가 업데이트되면서 그 안의 MainView도 다시 생성되고, Observable Object도 초기화되기 때문이죠."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"@ObservedObject은 객체가 초기화될 때마다 뷰를 다시 그리기 때문에 뷰의 라이프 사이클에 의존합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":" "}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"그렇다면 @StateObject와 @ObservedObject를 어떻게 문제 없이 적절하게 활용할 수 있을까요?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ObservableObject 프로토콜을 준수하는 객체를 "},{"type":"strong","inlineContent":[{"type":"text","text":"처음 초기화할 때는 StateObject"}]},{"type":"text","text":"를 사용하고, 이미 "},{"type":"strong","inlineContent":[{"type":"text","text":"초기화된 것을 넘겨 받을 때 ObservedObject"}]},{"type":"text","text":"를 사용하면 됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"article_StateObject_ObservedObject.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"아래의 예시 코드처럼 말이죠!"}]},{"type":"codeListing","syntax":"swift","code":["struct MainView: View {","    \/\/ 처음 초기화 하므로 @StateObject 사용","    @StateObject var viewModel = ViewModel() ","","    var body: some View {","        NavigationLink(\"Next\", destination: DetailView(viewModel: viewModel)  ","    }","}","","struct DetailView: View {","        \/\/ MainView로부터 초기화 된 것을 넘겨받았으므로 @ObservedObject 사용","    @ObservedObject var viewModel = ViewModel()","","    var body: some View {","        Text(viewModel.text)","    }","} "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"요약하고 마무리 하겠습니다. 😎"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"@StateObject : Observable Object를 인스턴스화합니다. 별도의 객체로 관리되므로 뷰의 라이프 사이클에 의존하지 않습니다. → 처음 객체를 초기화할 때 사용하기"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"@ObservedObject : Observable Object가 변경될 때 마다 뷰를 다시 그립니다. 뷰의 라이프 사이클에 의존합니다. → 초기화된 객체를 넘겨받을 때 사용하기"}]}]}]}]}],"variants":[{"paths":["\/documentation\/codershighdocument\/article_swiftui_stateobject_observedobject"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_SwiftUI_StateObject_ObservedObject","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"@StateObject와 @ObservedObject에 대해 알아봅시다."}],"kind":"article","metadata":{"modules":[{"name":"CodersHighDocument"}],"role":"collectionGroup","title":"SwiftUI의 Property Wrapper 2 : @StateObject와 @ObservedObject"},"hierarchy":{"paths":[["doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument"],["doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_SwiftUI_State_Binding"]]},"topicSections":[{"title":"SwiftUI","identifiers":["doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_SwiftUI_State_Binding","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/SwiftUIPrototyping"]}],"references":{"doc://CodersHighDocument/documentation/CodersHighDocument/Article_CodersHigh_Projects":{"role":"article","title":"코더스하이 수강생 프로젝트 소개","abstract":[{"type":"text","text":"코더스하이 수강생들이 만든 프로젝트 중 앱스토어에 등록된 프로젝트들을 소개합니다."}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_CodersHigh_Projects","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_codershigh_projects"},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_WWDC_Topics":{"role":"article","title":"WWDC 주제별 정리","abstract":[{"type":"text","text":"WWDC의 동영상들을 주제별로 정리했습니다."}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_WWDC_Topics","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_wwdc_topics"},"doc://CodersHighDocument/documentation/CodersHighDocument":{"role":"collection","title":"CodersHighDocument","abstract":[{"type":"text","text":"CodersHigh Document에 오신 것을 환영합니다!"},{"type":"text","text":" "},{"type":"text","text":"이곳에서는 CodersHigh에서 제작한 다양한 Article과 Tutorial을 확인할 수 있습니다."}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument","kind":"symbol","type":"topic","url":"\/documentation\/codershighdocument"},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_SwiftUI_State_Binding":{"role":"collectionGroup","title":"SwiftUI의 Property Wrapper 1 : @State와 @Binding","abstract":[{"type":"text","text":"@State와 @Binding에 대해 알아봅시다."}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_SwiftUI_State_Binding","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_swiftui_state_binding"},"doc://CodersHighDocument/documentation/CodersHighDocument/SwiftUIPrototyping":{"role":"collectionGroup","title":"SwiftUI튜토리얼","abstract":[{"type":"text","text":"SwiftUI의 기초 지식을 학습하는 튜토리얼입니다."}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/SwiftUIPrototyping","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/swiftuiprototyping"},"article_StateObject_ObservedObject.png":{"alt":"Image","type":"image","identifier":"article_StateObject_ObservedObject.png","variants":[{"url":"\/images\/article_StateObject_ObservedObject.png","traits":["1x","light"]}]}}}