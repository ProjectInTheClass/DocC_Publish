{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이번 포스트에서는 "},{"type":"strong","inlineContent":[{"type":"text","text":"Firebase"}]},{"type":"text","text":"라는 백엔드 서비스를 이용하여 여러 사용자와 채팅을 할 수 있는 공간을 구현해보겠습니다."},{"type":"text","text":" "},{"type":"text","text":"Firebase는 직접 서버를 구축할 필요 없이 서버가 가져야 할 기본적인 기능과 유저 인증, 활동 분석, 파일 저장소 등을 제공해주는 서비스이며, Google에서 제공합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"서버 없이도 많은 사용자들끼리 소통하거나 중요한 데이터들을 중앙서버에 저장할 필요가 있는 어플리케이션을 제작할 수가 있어 이 서비스를 활용한 많은 앱들이 등장하고 있는데요,이 글을 통해 Firebase의 활용법과 채팅 서비스의 구현 방식을 참고하여 채팅기능을 가진 어플리케이션 제작에 도움이 되길 희망합니다."}]},{"anchor":"시작하기","level":2,"type":"heading","text":"시작하기"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat1.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"먼저 새로운 Xcode 프로젝트를 시작하고 다음과 같이 UI를 구성합니다. 이 프로젝트에서는 총 4개의 View Controller들을 사용하겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"각각의 View Controller들은 다음과 같은 기능을 가지고 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"[로그인]"}]},{"type":"text","text":" : 이번 프로젝트에서는 2명의 유저를 Firebase에 추가하여 2개의 버튼(“Park으로 로그인”, “John으로 로그인”)을 이용하여 로그인을 할 수 있게끔 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"[채팅방 선택]"}]},{"type":"text","text":" : 진행되고 있던 채팅창의 목록을 확인하여 지난 채팅에 이어 계속해나갈 수 있도록 합니다. (TableView 활용)"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"[채팅을 하고자 하는 사용자]"}]},{"type":"text","text":" : 새로운 유저와 채팅을 하고 싶을 때 다른 유저들의 목록을 확인하여 새로운 채팅방을 개설합니다. (TableView 활용)"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"[실제 채팅창]"}]},{"type":"text","text":" : 채팅하고자 하는 유저와 실제 채팅을 합니다. (Collection View 활용 – Collection View Cell의 자동 resizing이 어떠한 방식으로 구현되는지 보여드리려고 합니다.)"}]},{"anchor":"Firebase-서비스-구성하기","level":2,"type":"heading","text":"Firebase 서비스 구성하기"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Firebase를 이용하기 위해서는 Firebase 서비스에 프로젝트를 추가하여 자신이 작업하고 있는 프로젝트에 연동을 해주셔야합니다. 그 방법을 차례대로 확인해보겠습니다."}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/"},{"type":"text","text":"에 들어가서 로그인합니다. (구글 계정으로 가능)"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat2.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"프로젝트 추가를 클릭합니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat3.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"프로젝트의 이름과 국가를 선택합니다. (현재 있는 위치에서 가까운 곳에 서버가 구축됩니다.)"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat4.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"다음과 같은 화면이 나오면 “iOS앱에 Firebase 추가”를 선택합니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat5.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"이제, Firebase를 추가하는 절차화면이 나옵니다. 이곳에 번들 id를 입력하라고 나옵니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat6.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"번들 id는 프로젝트를 클릭하여 General에 가시면 다음 위치에 존재합니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat7.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"앱 등록을 클릭하시면 “GoogleService-info.plist”파일이 자동으로 다운로드 되는데, 다운받은 파일을 다음과 같이 프로젝트에 추가하면 됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat8.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Firebase 라이브러리는 Cocoapod를 이용하여 Xcode 프로젝트에 추가해야 합니다. 먼저 터미널에서 명령어 “sudo gem install cocoapods”를 입력하여 cocoapods를 설치합니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat9.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"다음 단계인 Firebase SDK 추가로 진행하여 안내와 같이 Terminal에서 자신의 프로젝트가 있는 디렉토리로 이동하여 “pod init”명령어를 입력하면 Podfile이라는 이름의 파일이 생성됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat10.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"다음과 같이 “Podfile”이 생성되면 텍스트 에디터를 이용하여 열어봅니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat11.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"우리는 Firebase의 여러가지 기능 중, 로그인 기능과 데이터베이스를 활용할 것이므로 다음과 같이 Podfile을 수정합니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat12.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Podfile을 저장한 뒤 “pod install”명령어를 입력하면 Firebase이용을 위한 라이브러리들이 설치됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat13.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"설치 완료 후, 프로젝트 디렉토리를 보면 다음과 같이 구성되어 있는데, 프로젝트를 진행하던 xcode를 종료 한 후, 새로 생긴 .xcworkspace를 실행시켜줍니다. (기존 xcodeproj를 열어 프로젝트를 진행하면 cocoapods로 설치된 라이브러리들이 적용되지 않습니다.)"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat14.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"계속을 클릭하여 진행하면, 마지막으로 Firebase를 구성하기위한 코드 작성 페이지가 나옵니다. 다음 화면같이 AppDelegate.swift 파일에 코드를 추가하시면 되겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat15.png"}]}]}]},{"anchor":"Firebase-서비스-이용하기","level":2,"type":"heading","text":"Firebase 서비스 이용하기"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제, 연동된 Firebase의 기본기능들을 직접 이용해보면서 어떠한 방식으로 Firebase를 활용할 수 있는지 살펴보도록 하겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"우선 제일 먼저 사용할 기능은 사용자 인증입니다. Firebase에서는 사용자를 인증할 수 있는 여러가지 방법들을 제공하는데요, 그 중에 이메일을 사용한 인증방법을 활용해보겠습니다."}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"왼쪽 패널에서 Authentication > 로그인 방법에 보시면 로그인 제공업체가 있는데, 이곳에서 이메일을 이용한 인증을 사용하겠다는 설정을 해주셔야합니다."},{"type":"text","text":" "},{"type":"text","text":"“이메일\/비밀번호”를 클릭하면 다음과 같은 화면이 나오는데, 사용설정을 사용으로 바꿔주시고 저장버튼을 클릭해주세요."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat16.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"“사용자”탭을 눌러 들어오시면, 다음과 같이 사용자를 수동으로 추가하실 수 있습니다. 이번 프로젝트에서는 총 2명의 사용자를 직접 추가하여 로그인 하고 채팅하는 데 이용하겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat17.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"오른쪽 부분의 “사용자 추가”버튼을 클릭하여 사용자를 추가해주세요."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat18.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"총 2명의 사용자를 추가하면 다음과 같이 나오는데 오른쪽 부분의 사용자 uid는 사용자를 인식하거나 추가정보를 붙여넣을 때 활용될 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat19.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"이렇게 채팅에 활용할 사용자 등록을 마쳤고, 이제는 실제 서버역할을 해줄 데이터베이스를 어떻게 활용하는지 살펴보겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"왼쪽 패널에서 “Database”를 클릭해주시면 다음과 같은 화면을 보실 수 있는데 여기서 ‘fir-chattest-2d377’ 부분에 마우스를 갖다 대시면 JSON형식으로 추가해나갈 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat20.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"각 채팅 사용자의 이메일과 비밀번호를 제외한 부가정보(여기서는 name)를 추가하기 위해 데이터베이스에 유저 정보를 입력해보겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"‘+’ 버튼을 이용하여 다음과 같이 데이터를 추가할 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"여기에서 uid는 Database탭의 상단에 있는 Authentication패널에서 각 유저를 구별할 수 있는 사용자 UID를 복사한 값입니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat21.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"‘추가’ 버튼을 클릭하면 다음과 같이 줄기 형태의 데이터가 저장되는데, 이러한 데이터를 활용하여 채팅창을 구현할 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat22.png"}]}]}]},{"anchor":"Firebase를-이용한-채팅창-구현하기","level":2,"type":"heading","text":"Firebase를 이용한 채팅창 구현하기"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제, Firebase의 데이터를 iOS에서 활용할 수 있도록 어플리케이션을 직접 제작하여 구현해보도록 하겠습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"우선 파이어베이스와 데이터 연동을 위한 싱글턴 클래스를 제작해 보도록 하겠습니다."}]},{"type":"codeListing","syntax":"swift","code":["\/\/","\/\/  FirebaseDataService.swift","\/\/  firebaseTest","\/\/","\/\/  Created by hPark_ipl on 2017. 4. 25..","\/\/  Copyright © 2017년 hPark. All rights reserved.","\/\/","import Foundation","import Firebase","","fileprivate let baseRef = FIRDatabase.database().reference()","","class FirebaseDataService {","    static let instance = FirebaseDataService()","    ","    \/\/ 특정 데이터들이 저장되는 장소에 대한 레퍼런스","    \/\/ user : 특정 사용자","    let userRef = baseRef.child(\"user\")","    ","    \/\/ group : 채팅방 하나 단위","    let groupRef = baseRef.child(\"group\")","    ","    \/\/ message : 채팅 말풍선 하나 단위","    let messageRef = baseRef.child(\"message\")","    ","    \/\/ 현재 접속중인 유저의 uid","    var currentUserUid: String? {","        get {","            guard let uid = FIRAuth.auth()?.currentUser?.uid else {","                return nil","            }","            return uid","        }","    }","    ","    \/\/ 신규 유저 만들기","    func createUserInfoFromAuth(uid:String, userData: Dictionary<String, String>) {","        userRef.child(uid).updateChildValues(userData)","    }","    ","    \/\/ 사용자 로그인 하기","    func signIn(email withEmail: String, password: String, completion: @escaping () -> Void) {","        FIRAuth.auth()?.signIn(withEmail: withEmail, password: password, completion: { (user, error) in","            guard error == nil else {","                print(\"Error Occurred during Sign In\")","                return","            }","            completion()","        })","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"파이어베이스 데이터베이스 내부의 특정 데이터에 접근하기 위해서는 위 코드의 ‘userRef’, ‘groupRef’, ‘messageRef’ 같은 레퍼런스가 필요합니다. 이 레퍼런스를 child 메소드의 매개변수로 이용하면 데이터의 root에서 줄기를 따라 원하는 데이터가 있는 장소에 도달할 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"예를 들면, child 메소드에 ‘userRef’변수를 사용하면 유저 정보에 접근할 수 있으며, currentUserUid를 이용하면 현재 어플리케이션에 로그인 되었는지 확인할 수 있고, signIn 메소드를 이용하여 로그인을 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"잠깐, 더 넘어가기 전에 여기서 언급하는 ‘레퍼런스’와 기본적인 파이어베이스 API들을 살펴봅시다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"파이어베이스의 데이터들은 마치 파일 디렉토리 같이, 하나의 루트에서 여러 줄기로 뻗어나온 형태로 구성되어 있습니다. 그렇기에 데이터의 구조를 짜임새 있게 맞추는 것이 중요하며, 이 데이터들을 탐색하기 위하여 ‘레퍼런스’라는 개념을 사용합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"상단의 코드를 보시면 “fileprivate let baseRef = FIRDatabase.database().reference()”라는 부분이 있는데 이것이 현재 “fir-chattest-2d377(즉, 모든 데이터의 루트)”를 가리키고 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat23.png"}]},{"anchor":"다음은-레퍼런스를-이용하여-파이어베이스의-데이터-탐색-삽입-변경-관찰-등을-가능하게-해주는-API입니다","level":4,"type":"heading","text":"다음은, 레퍼런스를 이용하여 파이어베이스의 데이터 탐색, 삽입, 변경, 관찰 등을 가능하게 해주는 API입니다."},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"[child(key)] : key를 이용하여 하위 데이터에 접근할 수 있습니다. ex) baseRef.child(“user”) 하면 위 그림에서 user 노드로 참조하는 레퍼런스가 변경됩니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"[updateChildValues(data), setValues(data)] : 현재 접근한 레퍼런스에 존재하는 데이터를 변경하거나 삽입합니다. data는 딕셔너리 형태로 들어가도되고 단순 정수나 문자열로도 삽입이 가능합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"[observe(), observeSingleEvent()] : 현재 접근한 레퍼런스의 데이터의 변경이 이루어졌을 경우를 감시할 수 있습니다. 이 관찰자들을 설정해 두면 completion 인자에 넣어둔 클로저를 호출 할 수 있기 때문에 데이터의 변경이 일어날 때마다 어떠한 작업을 할 것인지 결정 할 수 있습니다. 이번 프로젝트에서는 대부분 채팅창이 입력될 때마다 데이터가 새로 추가되고 그것이 UI에 반영되게 하기 위해서 주로 사용합니다."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"자세한 사항은 "},{"type":"reference","isActive":true,"identifier":"https:\/\/firebase.google.com\/docs\/reference"},{"type":"text","text":"를 확인해주세요."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이번엔 채팅 앱에서 사용될 데이터 모델을 살펴보겠습니다."}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","","\/\/ 말풍선 하나","struct ChatMessage {","    var fromUserId: String","    var text: String","    var timestamp: NSNumber","}","","\/\/ 채팅방","struct Group {","    var key: String","    var name: String","    var messages: Dictionary<String, Int>","    ","    init(key: String, name: String) {","        self.key = key","        self.name = name","        self.messages = [:]","    }","    ","    init(key: String, data: Dictionary<String, AnyObject>) {","        self.key = key","        self.name = data[\"name\"] as! String","        if let messages = data[\"messages\"] as? Dictionary<String, Int> {","            self.messages = messages","        } else {","            self.messages = [:]","        }","    }","}","","\/\/ 사용자","struct User {","    var uid: String","    var email: String","    var username: String","    var group: Dictionary<String, String>","    ","    init(uid: String, email: String, username: String) {","        self.uid = uid","        self.email = email","        self.username = username","        self.group = [:]","    }","}"]},{"anchor":"총-3가지-모델로-구성되어-있는데-다음과-같습니다","level":4,"type":"heading","text":"총 3가지 모델로 구성되어 있는데 다음과 같습니다."},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"말풍선 – 채팅앱에서 핵심이 되는 한 단위의 메세지를 담는데 사용됩니다. 누구한테 왔는지, 무슨내용인지, 언제보냈는지에 대한 기본정보가 담겨있습니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"채팅방 – 각각의 채팅방이 가지고 있는 기본 정보와 채팅방이 포함한 말풍선들을 참조하는 데이터를 담고 있습니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"사용자 – 사용자의 기본적인 부가정보를 담아내는 데 사용합니다."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제, 뷰 컨트롤러들을 살펴보겠습니다. 처음엔 로그인을 위한 뷰 컨트롤러입니다."}]},{"type":"codeListing","syntax":"swift","code":["import UIKit","","class SignInViewController: UIViewController {","    ","    let chatViewController = ViewController()","    ","    func openChattingView() {","        performSegue(withIdentifier: \"chattingRooms\", sender: nil)","    }","    ","    @IBAction func johnButtonTapped(_ sender: UIButton) {","        FirebaseDataService.instance.signIn(email: \"myEmail@naver.com\", password: \"123456789\") {","            self.openChattingView()","        }","    }","    ","    @IBAction func parkButtonTapped(_ sender: UIButton) {","        FirebaseDataService.instance.signIn(email: \"yourEmail@naver.com\", password: \"123456789\") { ","            self.openChattingView()","        }","    }","    ","    override func viewDidLoad() {","        super.viewDidLoad()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"버튼을 누르면 FirebaseDataService의 인스턴스에 signIn(email:,password:) 함수를 호출해 로그인합니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat24.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"현재 이미 구성되어있는 채팅방의 목록을 볼 수 있는 뷰 컨트롤러입니다."}]},{"type":"codeListing","syntax":"swift","code":["import UIKit","","class ChatGroupViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {","    ","    var groups: [Group] = []","    @IBOutlet weak var tableView: UITableView!","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        tableView.delegate = self","        tableView.dataSource = self","        fetchChatGroupList()","    }","    ","    func fetchChatGroupList() {","        if let uid = FirebaseDataService.instance.currentUserUid {","            FirebaseDataService.instance.userRef.child(uid).child(\"groups\").observeSingleEvent(of: .value, with: { (snapshot) in","                if let dict = snapshot.value as? Dictionary<String, Int> {","                    for (key, _) in dict {","                        ","                        FirebaseDataService.instance.groupRef.child(key).observeSingleEvent(of: .value, with: { (snapshot) in","                            if let data = snapshot.value as? Dictionary<String, AnyObject> {","                                let group = Group(key: key, data: data)","                                self.groups.append(group)","                                ","                                DispatchQueue.main.async(execute: { ","                                    self.tableView.reloadData()","                                })","                            }","                        })","                    }","                }","            })","        }","    }","    ","    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {","        return groups.count","    }","    ","    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {","        performSegue(withIdentifier: \"chatting\", sender: groups[indexPath.row].key)","    }","    ","    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {","        let cell = tableView.dequeueReusableCell(withIdentifier: \"GroupCell\", for: indexPath)","        cell.textLabel?.text = groups[indexPath.row].name","        return cell","    }","    ","    @IBAction func addButtonTapped(_ sender: Any) {","        performSegue(withIdentifier: \"userList\", sender: self)","    }","    ","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if segue.identifier == \"userList\" {","            let userListVC = segue.destination as! UserListViewController","            let chatGroupVC = sender as! ChatGroupViewController","            userListVC.chatGroupVC = chatGroupVC","        } else if segue.identifier == \"chatting\" {","            let chatVC = segue.destination as! ViewController","            chatVC.groupKey = sender as? String","        }","    }","}"]},{"anchor":"유심히-보아야-할-메소드는-fetchChatGroupList입니다","level":4,"type":"heading","text":"유심히 보아야 할 메소드는 fetchChatGroupList입니다."},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 메소드는 현재 유저가 로그인이 되어있으면 미리 정의해둔 파이어베이스용 데이터 레퍼런스의 데이터를 지켜보고 있다가 데이터를 받아오는 데, 다음과 같은 순서로 동작합니다."}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"사용자가 어떠한 채팅방을 가지고 있는지 확인하여 채팅방에 대한 레퍼런스를 가져온다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"각 채팅방에 대한 레퍼런스를 가져오면 해달 레퍼런스를 이용하여 채팅방에 대한 정보를 가져온다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"채팅방의 배열을 채우고 테이블 뷰를 메인 UI스레드에서 업데이트한다."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat25.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"새로운 채팅방을 열고 싶을 때 가능한 유저의 목록을 볼 수 있는 뷰 컨트롤러입니다."}]},{"type":"codeListing","syntax":"swift","code":["import UIKit","","class UserListViewController: UIViewController, UITableViewDelegate, UITableViewDataSource  {","","    @IBOutlet weak var tableview: UITableView!","    ","    var chatGroupVC: ChatGroupViewController?","    var userList: [User] = []","    ","    func fetchUserList() {","        FirebaseDataService.instance.userRef.observeSingleEvent(of: .value, with: { (snapshot) in","            if let data = snapshot.value as? Dictionary<String, AnyObject>, let uid = FirebaseDataService.instance.currentUserUid {","                for (key, data) in data {","                    if uid != key {","                        if let userData = data as? Dictionary<String, AnyObject> {","                            let username = userData[\"name\"] as! String","                            let email = userData[\"email\"] as! String","                            let user = User(uid: uid, email: email, username: username)","                            self.userList.append(user)","                            ","                            DispatchQueue.main.async(execute: { ","                                self.tableview.reloadData()","                            })","                        }","                    }","                }","            }","        })","    }","    ","    override func viewDidLoad() {","        super.viewDidLoad()","        tableview.dataSource = self","        tableview.delegate = self","        fetchUserList()","    }","    ","    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {","        let ref = FirebaseDataService.instance.groupRef.childByAutoId()","        ref.child(\"name\").setValue(userList[indexPath.row].username as String)","        dismiss(animated: true) { ","            if let chatGroupVC = self.chatGroupVC {","                chatGroupVC.performSegue(withIdentifier: \"chatting\", sender: ref.key)","            }","        }","        return","    }","    ","    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {","        return userList.count","    }","    ","    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {","        let cell = tableview.dequeueReusableCell(withIdentifier: \"userCell\", for: indexPath)","        cell.textLabel?.text = userList[indexPath.row].username","        cell.detailTextLabel?.text = userList[indexPath.row].email","        return cell","    }","    ","    @IBAction func cancelButtonTapped(_ sender: Any) {","        dismiss(animated: true, completion: nil)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"유저의 목록을 불러올 때도 채팅방 목록을 불러올 때와 비슷한 방식으로 동작시킵니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"비교해보면서 어떠한 방식으로 파이어베이스 데이터를 활용하는지 확인해보세요."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat26.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제 이번 앱의 핵심인 채팅창을 나타내는 뷰 컨트롤러 입니다."}]},{"type":"codeListing","syntax":"swift","code":["class ChatRoomViewController: UIViewController, UITextFieldDelegate, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {","    ","    @IBOutlet weak var item: UINavigationItem!","    @IBOutlet weak var chatCollectionView: UICollectionView!","    @IBOutlet weak var sendButton: UIButton!","    @IBOutlet weak var chatTextField: UITextField!","    ","    var messages: [ChatMessage] = [ChatMessage(fromUserId: \"\", text: \"\", timestamp: 0)]","    ","    var groupKey: String? {","        didSet {","            if let key = groupKey {","                fetchMessages()","                FirebaseDataService.instance.groupRef.child(key).observeSingleEvent(of: .value, with: { (snapshot) in","                    if let data = snapshot.value as? Dictionary<String, AnyObject> {","                        if let title = data[\"name\"] as? String {","                            self.item.title = title","                        }","                    }","                })","            }","        }","    }","    ","    \/\/ numberOfItemsInSection","    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {","        return messages.count","    }","    ","    \/\/ cellForItemAt","    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {","        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"chatCell\", for: indexPath) as! ChatMessageCell","        let message = messages[indexPath.item]","        cell.textLabel.text = message.text","        setupChatCell(cell: cell, message: message)","        if message.text.characters.count > 0 {","            cell.containerViewWidthAnchor?.constant = measuredFrameHeightForEachMessage(message: message.text).width + 32","        }","        return cell","    }","    ","    \/\/ sizeForItemAt","    func setupChatCell(cell: ChatMessageCell, message: ChatMessage) {","        if message.fromUserId == FirebaseDataService.instance.currentUserUid {","            cell.containerView.backgroundColor = UIColor.magenta","            cell.textLabel.textColor = UIColor.white","            cell.containerViewRightAnchor?.isActive = true","            cell.containerViewLeftAnchor?.isActive = false","        } else {","            cell.containerView.backgroundColor = UIColor.lightGray","            cell.textLabel.textColor = UIColor.black","            cell.containerViewRightAnchor?.isActive = false","            cell.containerViewLeftAnchor?.isActive = true","        }","    }","    ","    private func measuredFrameHeightForEachMessage(message: String) -> CGRect {","        let size = CGSize(width: 200, height: 1000)","        let options = NSStringDrawingOptions.usesFontLeading.union(.usesLineFragmentOrigin)","        return NSString(string: message).boundingRect(with: size, options: options, attributes: [NSFontAttributeName: UIFont.systemFont(ofSize: 16)], context: nil)","    }","    ","    @IBAction func sendButtonTapped(_ sender: UIButton) {","        let ref = FirebaseDataService.instance.messageRef.childByAutoId()","        guard let fromUserId = FirebaseDataService.instance.currentUserUid else {","            return","        }","        ","        let data: Dictionary<String, AnyObject> = [","            \"fromUserId\": fromUserId as AnyObject,","            \"text\": chatTextField.text! as AnyObject,","            \"timestamp\": NSNumber(value: Date().timeIntervalSince1970)","        ]","        ","        ref.updateChildValues(data) { (err, ref) in","            guard err == nil else {","                print(err as Any)","                return","            }","            ","            self.chatTextField.text = nil","            if let groupId = self.groupKey {","                FirebaseDataService.instance.groupRef.child(groupId).child(\"messages\").updateChildValues([ref.key: 1])","            }","        }","    }","    ","    @IBAction func collectionViewTapped(_ sender: Any) {","        chatTextField.resignFirstResponder()","    }","    ","    func fetchMessages() {","        if let groupId = self.groupKey {","            let groupMessageRef = FirebaseDataService.instance.groupRef.child(groupId).child(\"messages\")","            groupMessageRef.observe(.childAdded, with: { (snapshot) in","                let messageId = snapshot.key","                let messageRef = FirebaseDataService.instance.messageRef.child(messageId)","                messageRef.observeSingleEvent(of: .value, with: { (snapshot) in","                    guard let dict = snapshot.value as? Dictionary<String, AnyObject> else {","                        return","                    }","                    let message = ChatMessage(","                        fromUserId: dict[\"fromUserId\"] as! String,","                        text: dict[\"text\"] as! String,","                        timestamp: dict[\"timestamp\"] as! NSNumber","                    )","                    self.messages.insert(message, at: self.messages.count - 1)","                    self.chatCollectionView.reloadData()","                    if self.messages.count >= 1 {","                        let indexPath = IndexPath(item: self.messages.count - 1, section: 0)","                        \/\/self.chatCollectionView.scrollToItem(at: indexPath, at: UICollectionViewScrollPosition(), animated: true)","                    }","                })","            })","        }","    }"]},{"anchor":"코드의-양이-많아-복잡해-보이지만-몇-가지-중점사항을-보면-됩니다","level":4,"type":"heading","text":"코드의 양이 많아 복잡해 보이지만, 몇 가지 중점사항을 보면 됩니다."},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"채팅 목록 창에서 특정 채팅방을 선택하면 그 채팅방을 구별할 수 있는 그룹 키를 가져와야합니다. (groupKey 프로퍼티)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"그룹키를 이용하여 해당 채팅방 데이터의 레퍼런스를 얻고, 이 레퍼런스를 활용하여 이 채팅방의 기본정보와 이 방안에서 이루어진 모든 채팅 메세지를 가져옵니다. (fetchMessage 메소드)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"채팅 메세지가 포함한 정보중에 ‘fromUserId’라는 정보가 있는데 이 정보가 로그인한 유저와 동일하면 말풍선을 오른쪽, 아니면 왼쪽에 붙여야 합니다. (setupChatCell 메소드)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"메세지를 보내면 파이어베이스의 데이터베이스에 채팅 메세지가 기록되어야 합니다. (sendButtonTapped 메소드)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat27.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"마지막으로 채팅 메세지의 말풍선을 구성하는 컬렉션뷰의 셀에 대한 코드입니다."}]},{"type":"codeListing","syntax":"swift","code":["import UIKit","","class ChatMessageCell: UICollectionViewCell {","    @IBOutlet weak var containerView: UIView!","    @IBOutlet weak var textLabel: UILabel!","    ","    var containerViewWidthAnchor: NSLayoutConstraint?","    var containerViewRightAnchor: NSLayoutConstraint?","    var containerViewLeftAnchor: NSLayoutConstraint?","    var containerViewHeightAnchor: NSLayoutConstraint?","    var textLabelHeightAnchor: NSLayoutConstraint?","    ","    func setUITraits() {","        containerView.layer.cornerRadius = 4","        ","        textLabel.numberOfLines = 0","        textLabel.lineBreakMode = .byWordWrapping","    }","    ","    func setAnchors() {","        containerView.translatesAutoresizingMaskIntoConstraints = false","        containerView.topAnchor.constraint(equalTo: topAnchor, constant: 0).isActive = true","        containerViewLeftAnchor = containerView.leftAnchor.constraint(equalTo: leftAnchor, constant: 4)","        containerViewRightAnchor = containerView.rightAnchor.constraint(equalTo: rightAnchor, constant: -4)","        containerViewWidthAnchor = containerView.widthAnchor.constraint(equalToConstant: 200)","        containerViewHeightAnchor = containerView.heightAnchor.constraint(equalToConstant: frame.height)","        containerViewWidthAnchor?.isActive = true","        containerViewHeightAnchor?.isActive = true","        ","        textLabel.translatesAutoresizingMaskIntoConstraints = false","        textLabel.topAnchor.constraint(equalTo: topAnchor, constant: 8).isActive = true","        textLabel.leftAnchor.constraint(equalTo: containerView.leftAnchor, constant: 4).isActive = true","        textLabel.rightAnchor.constraint(equalTo: containerView.rightAnchor, constant: 0).isActive = true","        textLabelHeightAnchor = textLabel.heightAnchor.constraint(equalToConstant: frame.height)","    }","    ","    override func awakeFromNib() {","        super.awakeFromNib()","        setAnchors()","        setUITraits()","    }","    ","    required init?(coder aDecoder: NSCoder) {","        super.init(coder: aDecoder)","    }","    ","    func measuredFrameHeightForEachMessage(message: String) -> CGRect {","        let size = CGSize(width: 200, height: 1000)","        let options = NSStringDrawingOptions.usesFontLeading.union(.usesLineFragmentOrigin)","        return NSString(string: message).boundingRect(with: size, options: options, attributes: [NSFontAttributeName: UIFont.systemFont(ofSize: 16)], context: nil)","    }","    ","    override func preferredLayoutAttributesFitting(_ layoutAttributes: UICollectionViewLayoutAttributes) -> UICollectionViewLayoutAttributes {","        setNeedsLayout()","        layoutIfNeeded()","        let size = contentView.systemLayoutSizeFitting(layoutAttributes.size)","        let height = measuredFrameHeightForEachMessage(message: textLabel.text!).height + 20","        var newFrame = layoutAttributes.frame","        newFrame.size.width = CGFloat(ceilf(Float(size.width)))","        newFrame.size.height = height","        containerViewHeightAnchor?.constant = height","        textLabelHeightAnchor?.constant = height","        layoutAttributes.frame = newFrame","        return layoutAttributes","    }","}"]},{"anchor":"여기서는-containerView가-풍선처럼-감싸는-컨테이너가-되겠고-textLabel이-채팅내용이-되겠습니다-이-컬렉션-셀에서는-눈여겨볼-사항은-2가지인데요","level":4,"type":"heading","text":"여기서는 containerView가 풍선처럼 감싸는 컨테이너가 되겠고, textLabel이 채팅내용이 되겠습니다. 이 컬렉션 셀에서는 눈여겨볼 사항은 2가지인데요."},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"containerView가 현재 포함하고 있는 모든 constraint 객체를 멤버변수로 가지고 있으면 뷰 컨트롤러에서 접근하여 위치를 자유자재로 조절할 수 있습니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"채팅의 내용은 항상 다르기 때문에 말풍선의 크기는 항상 다를 수밖에 없는데, preferredLayoutAttributesFitting 오버라이드 메소드를 이용하면 내부에서 정해준 크기에 따라 auto-resizing(자동 크기조절)을 할 수 있어 문자열 길이에 따라 다양한 크기의 말풍선을 만들어낼 수 있습니다 (현재 measuredFrameHeightForEachMessage 메소드 내부를 확인하면 가로 200에 문자열 16으로 특정 글을 구성하였을 때 그 글을 포함할 수 있는 사각형의 크기를 반환받을 수 있습니다.)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"여기까지 구현이 완료되어 어플로 채팅을 직접 해보면 다음과 같은 방식으로 파이어베이스의 데이터베이스에 다음과 같이 기록됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"firebase_chat28.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"채팅에 참여하는 각 유저는 특정 채팅 그룹(group)의 레퍼런스를 참조하고 있고 이 그룹내의 ‘messages’에서 이 그룹이 소유하고 있는 메세지들만 골라서 참조하는 방식으로 데이터베이스가 기록됩니다."}]},{"anchor":"마치며","level":2,"type":"heading","text":"마치며"},{"type":"paragraph","inlineContent":[{"type":"text","text":"지금까지 파이어베이스를 이용하여 채팅창을 구성하는 방법을 배웠습니다. 이것을 기본으로 하여 다른 다양한 방식의 채팅어플을 만들어보세요. 전체 소스는 "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/Hpark11\/firebaseChatTest"},{"type":"text","text":"에서 확인하실 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/youtu.be\/0BO0aaSQoXY"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/codershighdocument\/article_firebase_chat"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Firebase_Chat","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Posted: 2017.06.17 | By: Hyunsoo Park"}],"kind":"article","metadata":{"roleHeading":"Article","title":"Firebase를 이용하여 채팅창 만들기","role":"article","modules":[{"name":"CodersHighDocument"}]},"hierarchy":{"paths":[["doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument"]]},"seeAlsoSections":[{"title":"Tech Blog","identifiers":["doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_UISearchController","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Tag_Cloud","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Naver_API","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Create_PlaygroundBook","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Firebase_Timeline","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Calendar_Vot","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_ReplayKit"],"generated":true}],"references":{"firebase_chat6.png":{"alt":"Image","type":"image","identifier":"firebase_chat6.png","variants":[{"url":"\/images\/firebase_chat6.png","traits":["1x","light"]}]},"firebase_chat10.png":{"alt":"Image","type":"image","identifier":"firebase_chat10.png","variants":[{"url":"\/images\/firebase_chat10.png","traits":["1x","light"]}]},"firebase_chat26.png":{"alt":"Image","type":"image","identifier":"firebase_chat26.png","variants":[{"url":"\/images\/firebase_chat26.png","traits":["1x","light"]}]},"firebase_chat28.png":{"alt":"Image","type":"image","identifier":"firebase_chat28.png","variants":[{"url":"\/images\/firebase_chat28.png","traits":["1x","light"]}]},"https://firebase.google.com/":{"title":"파이어베이스 홈페이지","titleInlineContent":[{"type":"text","text":"파이어베이스 홈페이지"}],"type":"link","identifier":"https:\/\/firebase.google.com\/","url":"https:\/\/firebase.google.com\/"},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Tag_Cloud":{"role":"article","title":"3d 스크롤이 가능한 태그 클라우드 만들기","abstract":[{"type":"text","text":"Posted: 2018.09.05 | By: 김소연 (github.com\/aa9390)"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Tag_Cloud","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_tag_cloud"},"firebase_chat22.png":{"alt":"Image","type":"image","identifier":"firebase_chat22.png","variants":[{"url":"\/images\/firebase_chat22.png","traits":["1x","light"]}]},"firebase_chat27.png":{"alt":"Image","type":"image","identifier":"firebase_chat27.png","variants":[{"url":"\/images\/firebase_chat27.png","traits":["1x","light"]}]},"firebase_chat25.png":{"alt":"Image","type":"image","identifier":"firebase_chat25.png","variants":[{"url":"\/images\/firebase_chat25.png","traits":["1x","light"]}]},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Naver_API":{"role":"article","title":"네이버 오픈 API를 이용한 영화 검색 애플리케이션 만들기","abstract":[{"type":"text","text":"Posted: 2018.08.20 | By: Sujin Kim (gfsusan@naver.com)"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Naver_API","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_naver_api"},"firebase_chat17.png":{"alt":"Image","type":"image","identifier":"firebase_chat17.png","variants":[{"url":"\/images\/firebase_chat17.png","traits":["1x","light"]}]},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Create_PlaygroundBook":{"role":"article","title":"플레이그라운드 북 만들기","abstract":[{"type":"text","text":"Posted: 2018.03.18 | By: 윤성관"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Create_PlaygroundBook","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_create_playgroundbook"},"firebase_chat9.png":{"alt":"Image","type":"image","identifier":"firebase_chat9.png","variants":[{"url":"\/images\/firebase_chat9.png","traits":["1x","light"]}]},"firebase_chat13.png":{"alt":"Image","type":"image","identifier":"firebase_chat13.png","variants":[{"url":"\/images\/firebase_chat13.png","traits":["1x","light"]}]},"firebase_chat8.png":{"alt":"Image","type":"image","identifier":"firebase_chat8.png","variants":[{"url":"\/images\/firebase_chat8.png","traits":["1x","light"]}]},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Calendar_Vot":{"role":"article","title":"메시지 익스텐션을 이용한 Calendar-Vot 제작기","abstract":[{"type":"text","text":"Posted: 2017.03.17 | By: 염혜리(yhr7518@gmail.com)"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Calendar_Vot","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_calendar_vot"},"firebase_chat20.png":{"alt":"Image","type":"image","identifier":"firebase_chat20.png","variants":[{"url":"\/images\/firebase_chat20.png","traits":["1x","light"]}]},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_UISearchController":{"role":"article","title":"UISearchController로 검색 개발하기","abstract":[{"type":"text","text":"Posted: 2019.01.14 | By: Quino0627 (dongwook627@gmail.com)"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_UISearchController","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_uisearchcontroller"},"firebase_chat19.png":{"alt":"Image","type":"image","identifier":"firebase_chat19.png","variants":[{"url":"\/images\/firebase_chat19.png","traits":["1x","light"]}]},"https://firebase.google.com/docs/reference":{"title":"Firebase Docs","titleInlineContent":[{"type":"text","text":"Firebase Docs"}],"type":"link","identifier":"https:\/\/firebase.google.com\/docs\/reference","url":"https:\/\/firebase.google.com\/docs\/reference"},"firebase_chat24.png":{"alt":"Image","type":"image","identifier":"firebase_chat24.png","variants":[{"url":"\/images\/firebase_chat24.png","traits":["1x","light"]}]},"firebase_chat18.png":{"alt":"Image","type":"image","identifier":"firebase_chat18.png","variants":[{"url":"\/images\/firebase_chat18.png","traits":["1x","light"]}]},"firebase_chat1.png":{"alt":"Image","type":"image","identifier":"firebase_chat1.png","variants":[{"url":"\/images\/firebase_chat1.png","traits":["1x","light"]}]},"firebase_chat12.png":{"alt":"Image","type":"image","identifier":"firebase_chat12.png","variants":[{"url":"\/images\/firebase_chat12.png","traits":["1x","light"]}]},"firebase_chat23.png":{"alt":"Image","type":"image","identifier":"firebase_chat23.png","variants":[{"url":"\/images\/firebase_chat23.png","traits":["1x","light"]}]},"firebase_chat3.png":{"alt":"Image","type":"image","identifier":"firebase_chat3.png","variants":[{"url":"\/images\/firebase_chat3.png","traits":["1x","light"]}]},"firebase_chat5.png":{"alt":"Image","type":"image","identifier":"firebase_chat5.png","variants":[{"url":"\/images\/firebase_chat5.png","traits":["1x","light"]}]},"firebase_chat7.png":{"alt":"Image","type":"image","identifier":"firebase_chat7.png","variants":[{"url":"\/images\/firebase_chat7.png","traits":["1x","light"]}]},"firebase_chat14.png":{"alt":"Image","type":"image","identifier":"firebase_chat14.png","variants":[{"url":"\/images\/firebase_chat14.png","traits":["1x","light"]}]},"https://github.com/Hpark11/firebaseChatTest":{"title":"Github","titleInlineContent":[{"type":"text","text":"Github"}],"type":"link","identifier":"https:\/\/github.com\/Hpark11\/firebaseChatTest","url":"https:\/\/github.com\/Hpark11\/firebaseChatTest"},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_ReplayKit":{"role":"article","title":"ReplayKit을 이용해 여행 떠나기","abstract":[{"type":"text","text":"Posted: 2017.03.15 | By: Junyeong Yoo"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_ReplayKit","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_replaykit"},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Firebase_Timeline":{"role":"article","title":"Firebase를 이용하여 Timeline만들기","abstract":[{"type":"text","text":"Posted: 2018.01.13 | By: Byoungwook Park"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Firebase_Timeline","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_firebase_timeline"},"firebase_chat4.png":{"alt":"Image","type":"image","identifier":"firebase_chat4.png","variants":[{"url":"\/images\/firebase_chat4.png","traits":["1x","light"]}]},"https://youtu.be/0BO0aaSQoXY":{"title":"결과물 영상","titleInlineContent":[{"type":"text","text":"결과물 영상"}],"type":"link","identifier":"https:\/\/youtu.be\/0BO0aaSQoXY","url":"https:\/\/youtu.be\/0BO0aaSQoXY"},"firebase_chat16.png":{"alt":"Image","type":"image","identifier":"firebase_chat16.png","variants":[{"url":"\/images\/firebase_chat16.png","traits":["1x","light"]}]},"firebase_chat21.png":{"alt":"Image","type":"image","identifier":"firebase_chat21.png","variants":[{"url":"\/images\/firebase_chat21.png","traits":["1x","light"]}]},"firebase_chat15.png":{"alt":"Image","type":"image","identifier":"firebase_chat15.png","variants":[{"url":"\/images\/firebase_chat15.png","traits":["1x","light"]}]},"firebase_chat2.png":{"alt":"Image","type":"image","identifier":"firebase_chat2.png","variants":[{"url":"\/images\/firebase_chat2.png","traits":["1x","light"]}]},"doc://CodersHighDocument/documentation/CodersHighDocument":{"role":"collection","title":"CodersHighDocument","abstract":[{"type":"text","text":"CodersHigh Document에 오신 것을 환영합니다!"},{"type":"text","text":" "},{"type":"text","text":"이곳에서는 CodersHigh에서 제작한 다양한 Article과 Tutorial을 확인할 수 있습니다."}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument","kind":"symbol","type":"topic","url":"\/documentation\/codershighdocument"},"firebase_chat11.png":{"alt":"Image","type":"image","identifier":"firebase_chat11.png","variants":[{"url":"\/images\/firebase_chat11.png","traits":["1x","light"]}]}}}