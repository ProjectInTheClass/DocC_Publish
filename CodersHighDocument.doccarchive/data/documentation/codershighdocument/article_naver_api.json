{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"naver1.png"}]},{"anchor":"시작하기에-앞서","level":2,"type":"heading","text":"시작하기에 앞서"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이번 기술 블로그에서는 "},{"type":"reference","isActive":true,"identifier":"https:\/\/developers.naver.com\/main\/"},{"type":"text","text":"에서 제공하는 네이버 오픈 API를 사용하는 방법에 대해서 알려드리고자 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"오픈 API란, API 중에서 플랫폼의 기능 또는 콘텐츠를 외부에서 웹 프로토콜(HTTP)로 호출해 사용할 수 있게 개방(open)한 API를 의미합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"현재 네이버 오픈 API로 활용할 수 있는 기술에는 네아로(네이버 아이디로 로그인), 지도, 검색이 있으며, Clova의 음성 인식 기술과 음성 합성 기술, 얼굴 인식 기술, Papago의 기계 번역 기술 등이 있습니다."}]},{"anchor":"예제-애플리케이션-소개","level":2,"type":"heading","text":"예제 애플리케이션 소개"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이번 포스트에서는 "},{"type":"strong","inlineContent":[{"type":"text","text":"영화 검색 애플리케이션"}]},{"type":"text","text":"을 만들 것입니다. 사용자로부터 영화 검색어를 입력받은 후, 네이버 오픈 API 호출을 통해 검색어와 일치하는 영화 정보를 불러와 테이블뷰에 표시합니다. 그리고 원하는 영화를 터치하면 각 영화의 세부 정보를 보여줍니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"naver2.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"구현하고자 하는 핵심 기능은 "},{"type":"strong","inlineContent":[{"type":"text","text":"네이버의 검색 API"}]},{"type":"text","text":"를 사용한 영화 검색 기능입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"영화 포스터 이미지 다운로드는 "},{"type":"strong","inlineContent":[{"type":"text","text":"비동기 작업"}]},{"type":"text","text":"을 사용해 다운로드 작업을 뒤로 미루고, 포스터 이미지가 모두 다운로드 될 때까지 기다릴 필요 없이 바로 검색 결과를 확인할 수 있도록 테이블 뷰를 구성합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"마지막으로, "},{"type":"strong","inlineContent":[{"type":"text","text":"HTTP Request"}]},{"type":"text","text":"를 사용하여 영화의 세부 정보를 보여주는 사파리 뷰를 구성합니다."}]},{"anchor":"시작하기","level":2,"type":"heading","text":"시작하기"},{"anchor":"STEP-0-스타터-프로젝트-다운로드","level":2,"type":"heading","text":"STEP 0. 스타터 프로젝트 다운로드"},{"type":"paragraph","inlineContent":[{"type":"text","text":"시작하기에 앞서 "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/gfsusan\/NaverAPIExample"},{"type":"text","text":"에서 스타터 프로젝트를 다운로드하여 각 단계를 따라가시면 됩니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"프로젝트를 처음부터 만드시고 싶으신 분들은 아래 사진과 같이 UI를 구성하시면 됩니다. 프로젝트를 만드실 때에는 "},{"type":"strong","inlineContent":[{"type":"text","text":"애플리케이션 이름"}]},{"type":"text","text":"과 "},{"type":"strong","inlineContent":[{"type":"text","text":"애플리케이션 Bundle ID"}]},{"type":"text","text":"를 기억해 두었다가 오픈API 신청 시 기입하시기 바랍니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"naver3.png"}]},{"anchor":"STEP-1-네이버-오픈-API","level":2,"type":"heading","text":"STEP 1. 네이버 오픈 API"},{"anchor":"애플리케이션-등록","level":4,"type":"heading","text":"[애플리케이션 등록]"},{"type":"paragraph","inlineContent":[{"type":"text","text":"네이버 오픈 API를 사용하기 위해서는 네이버로부터 "},{"type":"strong","inlineContent":[{"type":"text","text":"클라이언트 아이디"}]},{"type":"text","text":"와 "},{"type":"strong","inlineContent":[{"type":"text","text":"클라이언트 시크릿"}]},{"type":"text","text":"을 발급받아야 합니다. 이는 네이버 오픈API 사용자가 인증된 사용자인지 확인하는 고유한 아이디와 비밀번호로, 네이버 개발자센터의 "},{"type":"strong","inlineContent":[{"type":"text","text":"애플리케이션 등록"}]},{"type":"text","text":" 메뉴에서 "},{"type":"reference","isActive":true,"identifier":"https:\/\/developers.naver.com\/apps\/#\/register"},{"type":"text","text":"하면 발급되는 값입니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"naver4.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"위와 같이 애플리케이션 이름을 프로젝트명과 동일하게 작성한 다음, 사용 API를 검색으로 설정합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"마지막으로 비로그인 오픈API 서비스 환경에서 iOS 설정을 추가한 다음, Xcode 프로젝트 생성 시 애플리케이션의 Bundle ID를 정확하게 입력합니다."}]},{"anchor":"클라이언트-아이디와-클라이언트-시크릿","level":4,"type":"heading","text":"[클라이언트 아이디와 클라이언트 시크릿]"},{"type":"paragraph","inlineContent":[{"type":"text","text":"애플리케이션 등록을 마치고 나면, "},{"type":"reference","isActive":true,"identifier":"https:\/\/developers.naver.com\/apps\/#\/list"},{"type":"text","text":" 아래 등록한 애플리케이션의 목록이 나타납니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"자신의 애플리케이션명을 클릭하면, 애플리케이션 정보가 나타나며, 자신의 클라이언트 아이디와 클라이언트 시크릿을 확인할 수 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"naver5.png"}]},{"anchor":"코드","level":4,"type":"heading","text":"[코드]"},{"type":"paragraph","inlineContent":[{"type":"text","text":"먼저, "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/gfsusan\/NaverAPIExample\/blob\/master\/NaverAPIExample\/NaverAPIExample\/Model.swift"},{"type":"text","text":"를 만들어 Movie 클래스를 만들어 줍니다."}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","import UIKit","","class Movie {","    var title:String?","    var link:String?","    var imageURL:String?","    var image:UIImage?","    var pubDate:String?","    var director:String?","    var actors:String?","    var userRating:String?","    ","    init() {","        ","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"모든 속성은 Movie 객체를 생성한 후에 값을 입력해줄 것이기 때문에, Optional로 처리합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"두 번째는 "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/gfsusan\/NaverAPIExample\/blob\/master\/NaverAPIExample\/NaverAPIExample\/SearchViewController.swift"},{"type":"text","text":"입니다."}]},{"type":"codeListing","syntax":"swift","code":["class SearchViewController: UIViewController {","    @IBAction func searchButtonPressed(_ sender: Any) {","        if let query = searchTextField.text {","            performSegue(withIdentifier: \"searchSegue\", sender: self)","        }","    }","  ","    \/\/ MARK: - Navigation","    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {","        if let moviesVC = segue.destination as? MoviesTableViewController {","            if let text = searchTextField.text {","                moviesVC.queryText = text","            }","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"먼저 SearchVC에서 MoviesTableVC로 향하는 segue를 연결해두고, ‘검색’ 버튼을 눌렀을 때 segue를 실행합니다. prepareForSegue() 메소드에서는 MoviesTableVC의 queryText 필드에 텍스트 필드의 내용을 저장해줌으로써 다음 뷰로 검색어를 넘겨줍니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"검색어를 입력 받고 결과를 표시하는 방법으로 뷰에 Search Bar를 만들어 두고  UISearchController를 이용하는 방법이 있습니다. 이 방법을 사용하면 한 개의 뷰에서 검색어를 입력하고 그 결과를 받아올 수 있습니다. 하지만 이번 블로그에서는 네이버 API를 사용하여 HTML 요청을 전송하는 방법에 초점을 맞추기 위해서 검색어를 입력하는 부분과 검색 결과를 출력하는 부분을 분리하였습니다. UISearchController에 대한 정보를 더 얻고 싶으시다면 "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uisearchcontroller"},{"type":"text","text":" 페이지를 참고하시기 바랍니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"세 번째는 "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/gfsusan\/NaverAPIExample\/blob\/master\/NaverAPIExample\/NaverAPIExample\/MoviesTableViewController.swift"},{"type":"text","text":"입니다."}]},{"type":"codeListing","syntax":"swift","code":["class MoviesTableViewController: UITableViewController, XMLParserDelegate{","    let clientID        = \"huN1_ueBcLHV9AnTNwpi\"    \/\/ ClientID","    let clientSecret    = \"kb3OGCZ9rC\"              \/\/ ClientSecret","    ","    var queryText:String?                   \/\/ SearchVC에서 받아 오는 검색어","    var movies:[Movie]              = []    \/\/ API를 통해 받아온 결과를 저장할 array","    ","    \/\/ XML delegate","    var strXMLData: String?         = \"\"   \/\/ xml 데이터를 저장","    var currentTag: String?         = \"\"   \/\/ 현재 item의 tag를 저장","    var currentElement: String      = \"\"   \/\/ 현재 element의 내용을 저장","    var item: Movie?                = nil  \/\/ 검색하여 만들어지는 Movie 객체","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"우선, 위와 같이 MoviesTableViewController에게 XMLParserDelegate 프로토콜을 적용합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"다음으로 네이버 개발자 센터에서 발급받은 클라이언트 아이디와 클라이언트 시크릿을 변수에 저장합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"strXMLData에는 https:\/\/openapi.naver.com 에 요청한 쿼리에 대한 응답인 xml 데이터가 저장됩니다."}]},{"anchor":"XML-데이터의-예","level":4,"type":"heading","text":"[XML 데이터의 예]"},{"type":"codeListing","syntax":"xml","code":["<rss version=\"2.0\">","    <channel>","        <title>Naver Open API - movie ::'주식'<\/title>","        <link>http:\/\/search.naver.com<\/link>","        <description>Naver Search Result<\/description>","        <lastBuildDate>Wed, 28 Sep 2016 16:40:17 +0900<\/lastBuildDate>","        <total>2<\/total>","        <start>1<\/start>","        <display>2<\/display>","        <item>","            <title>주마등&lt;b&gt;주식&lt;\/b&gt;회사<\/title>","            <link>http:\/\/openapi.naver.com\/l?AAADWLQQvCIBzFP83f48h0zh08uK1B0S2IOm7mUEIts0F9+vQQPN77vQfv+dbxI2DXgyTQ9QV4B+2ATNSLMCk9gEjYjlkurFZXflp1rFRw\/yXnbEspNk8vqypvPJBRhZsGMrSMY4ySwLSpN5RT3NSYIScO5nxhdzc18cjq0958w8LneKUy8fz6AdRxjD6YAAAA<\/link><image>http:\/\/imgmovie.naver.com\/mdi\/mit110\/0968\/96811_P01_142155.jpg<\/image>","            <subtitle>走馬&amp;amp;#28783;株式&amp;amp;#20250;社<\/subtitle>","            <pubDate>2012<\/pubDate>","            <director>미키 코이치로|<\/director>","            <actor>카시이 유우|쿠보타 마사타카|카지와라 히카리|치요 쇼타|요코야마 메구미|카시와바라 슈지|<\/actor>","            <userRating>4.50<\/userRating>","        <\/item>","        ...","    <\/channel>","<\/rss>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"xml 데이터는 위와 같은 형식으로 이루어져 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"우리가 주의 깊게 볼 부분은 <item> 태그로 둘러싸여 있는 부분입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"title, link, subtitle, pubDate, director, actor, userRating 등에 해당하는 내용을 element라고 부르며, 각 element는 <title>리틀 포레스트<\/title>과 같이 태그로 둘러싸여 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제 이 데이터를 Parse(분석, 또는 쪼갬)하여 Movie객체를 생성할 것입니다. currentTag는 현재 tag를 알려주는 변수이고, currentElement은 현재 element에 해당하는 데이터를 저장하게 될 변수입니다. item은 Movie의 객체로, 한 개의 item을 Parsing에 성공하면 하나의 객체가 완성되는 것입니다."}]},{"anchor":"XML-파서의-종류","level":4,"type":"heading","text":"[XML 파서의 종류]"},{"type":"paragraph","inlineContent":[{"type":"text","text":"XML 문서 내의 데이터를 읽어내는 XML 파서는 SAX(XML용 간편 API) 타입과 DOM(문서객체모델) 타입이 있습니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"1. SAX(Simple API for XML)"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SAX 타입의 파서는 이름 그대로 간단한 API를 제공하며, 순차적으로 XML 문서의 내용을 파싱합니다. iOS SDK에서 기본적으로 제공되는 클래스인 XMLParser가 SAX 타입의 파서입니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2. DOM(Document Object Model)"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"DOM 타입의 파서는 문서 전체를 읽어 메모리에 트리 구조로 올려 놓고 원하는 요소(Element)에 바로 접근할 수 있도록 만든 파서입니다. DOM 타입의 파서는 iPhone SDK의 파운데이션 프레임워크에 없습니다. 따라서 DOM 타입의 파서를 사용하기 위해서는 조금 더 하위 수준의 libxml2를 이용하거나, 외부 라이브러리를 이용해야 합니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SAX 타입은 XML 데이터를 순차적으로 읽어나가면서 원하는 요소를 걸러내도록 되어 있기 때문에 거추장스럽고 시간은 많이 걸리지만 사용하는 메모리 양은 적은 편이며, DOM 타입은 그 반대로 빠르지만 메모리를 많이 사용합니다. 이번 애플리케이션에서는 적은 메모리를 사용할 수 있도록 SAX 타입의 XMLParser를 사용하도록 하겠습니다."}]},{"anchor":"코드","level":4,"type":"heading","text":"[코드]"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"MoviesTableViewController의 searchMovies() 메소드"}]}]},{"type":"codeListing","syntax":"swift","code":["func searchMovies() {","        \/\/ movies 초기화","        movies = []","        ","        \/\/ queryText가 없으면 return","        guard let query = queryText else {","            return","        }","        ","        let urlString = \"https:\/\/openapi.naver.com\/v1\/search\/movie.xml?query=\" + query","        let urlWithPercentEscapes = urlString.addingPercentEncoding(withAllowedCharacters: NSCharacterSet.urlQueryAllowed)","        let url = URL(string: urlWithPercentEscapes!)","        ","        var request = URLRequest(url: url!)","        request.addValue(\"application\/xml; charset=utf-8\", forHTTPHeaderField: \"Content-Type\")","        request.addValue(clientID, forHTTPHeaderField: \"X-Naver-Client-Id\")","        request.addValue(clientSecret, forHTTPHeaderField: \"X-Naver-Client-Secret\")","        ","        let task = URLSession.shared.dataTask(with: request) { data, response, error in","            \/\/ 에러가 있으면 리턴","            guard error == nil else {","                print(error)","                return","            }","            ","            \/\/ 데이터가 비었으면 출력 후 리턴","            guard let data = data else {","                print(\"Data is empty\")","                return","            }","            ","            \/\/ 데이터 초기화","            self.item?.actors = \"\"","            self.item?.director = \"\"","            self.item?.imageURL = \"\"","            self.item?.link = \"\"","            self.item?.pubDate = \"\"","            self.item?.title = \"\"","            self.item?.userRating = \"\"","            ","            \/\/ Parse the XML","            let parser = XMLParser(data: Data(data))","            parser.delegate = self","            let success:Bool = parser.parse()","            if success {","                print(self.strXMLData)","            } else {","                print(\"parse failure!\")","            }","        }","        task.resume()","    }"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"10-15 : 요청 텍스트를 담아 url을 생성합니다. Line 10의 코드를 작성하는 이유는 query 문자열 안에 url에 허용되지 않는 문자가 들어있을 때 인코딩을 통해서 HTTP 요청을 보낼 때 문제가 생기지 않도록 하는 것입니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"17-22 : URLRequest를 생성합니다. URL 요청에는 앞서 발급받은 클라이언트 아이디와 클라이언트 시크릿을 함께 전송합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"24-36 : URL Connection Task를 생성합니다. 에러가 있거나, 데이터가 비어있으면 리턴합니다. 그리고 item을 초기화합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"48-55 : parse() 메소드를 호출하여 xml parsing을 시작합니다. parse()메소드를 호출하게 되면, parserDidStartElement(), parserFoundCharacters(), parserDidEndElement() 메소드가 차례로 호출됩니다."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"MoviesTableViewController의 parserDidStartElement() 메소드"}]}]},{"type":"codeListing","syntax":"swift","code":["func parser(_ parser: XMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String] = [:]) {","        if elementName == \"title\" || elementName == \"link\" || elementName == \"image\" || elementName == \"pubDate\" || elementName == \"director\" || elementName == \"actor\" || elementName == \"userRating\" {","            currentElement = \"\"","            if elementName == \"title\" {","                item = Movie()","            }","        }","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 메소드는 parser가 시작태그를 발견했을 때 호출됩니다. 태그는 elementName에 매개변수로 주어집니다. 태그가 title, link, image, pubDate, director, actor, 또는 userRating과 일치하면 currentElement를 초기화하고, 첫 번째 태그인 title과 일치하면 새로운 Movie 객체를 생성합니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"MoviesTableViewController의 parserFoundCharacers() 메소드"}]}]},{"type":"codeListing","syntax":"swift","code":["func parser(_ parser: XMLParser, foundCharacters string: String) {","        currentElement += string","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 메소드는 parserDidStartElement() 다음으로 호출됩니다. 시작 태그를 인식한 후 데이터를 읽었음을 의미하는데, 간단하게 currentElement에 string의 내용을 덧붙여줍니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"MoviesTableViewController의 parserDidEndElement() 메소드"}]}]},{"type":"codeListing","syntax":"swift","code":["func parser(_ parser: XMLParser, didEndElement elementName: String, namespaceURI: String?, qualifiedName qName: String?) {","        if elementName == \"title\" {","            item?.title = currentElement.replacingOccurrences(of: \"<[^>]+>\", with: \"\", options: .regularExpression, range: nil)","        } else if elementName == \"link\" {","            item?.link = currentElement","        } else if elementName == \"image\" {","            item?.imageURL = currentElement","        } else if elementName == \"pubDate\" {","            item?.pubDate = currentElement","        } else if elementName == \"director\" {","            item?.director = currentElement","            if item?.director != \"\" {","                item?.director?.removeLast()","            }","        } else if elementName == \"actor\" {","            item?.actors = currentElement","            if item?.actors != \"\" {","                item?.actors?.removeLast()","            }","        } else if elementName == \"userRating\" {","            item?.userRating = currentElement","            movies.append(self.item!)","            DispatchQueue.main.async {","                self.tableView.reloadData()","            }","        }","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 메소드는 parserFoundCharaters() 다음으로 호출되며, 끝 태그를 인식했다는 의미입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 메소드에서는 현재 태그에 해당하는 Movie의 속성을 지정해줍니다. 예를 들어, 을 발견했으면 item?.title = currentElement을 해줍니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Line 3에서 replacingOccurrences를 해주는 것은 검색API에서 검색어와 일치하는 문자열을 볼드체 태그로 감싸서 응답을 주기 때문에 태그를 제거해 주는 작업입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"12-16와 17-21 같은 경우에는 다수의 인물을 구분하기 위해 “|” 문자를 구별자로 사용하는데, 문자열의 마지막에 불필요한 “|”를 삭제해주는 작업입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"22-27에는 item을 movies 배열에 추가해주고, 테이블뷰를 새로고침합니다. DispatchQueue.main.async에 대해서는 STEP 2 에서 다룹니다."}]},{"anchor":"STEP-2-비동기-작업","level":2,"type":"heading","text":"STEP 2. 비동기 작업"},{"type":"paragraph","inlineContent":[{"type":"text","text":"다음은 비동기 작업에 대해서 알아봅시다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"쇼핑 애플리케이션 사용 경험을 떠올려 보면, 테이블 뷰에 콘텐츠가 로딩된 후, 상품 이미지가 하나 둘 씩 나타나는 것을 보신 적이 있을 것입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이는 웹으로부터 사진을 다운로드하느라 뷰가 늦게 로딩되는 것을 방지하기 위해서, 기본 이미지를 먼저 띄워 놓고, 백그라운드에서 이미지 다운로드가 완료되는 즉시 이미지를 뷰에 나타내는 것입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"따라서 비동기 작업 큐(Queue)에 사진 다운로드와 같은 작업을 넣어 두고, 뷰(UI)가 먼저 로딩된 후에 차례로 다운로드 작업을 완료해 나가는 것입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"이번 단계에서는 MoviesTableVC가 로딩된 이후에 차례로 영화의 포스터 이미지를 다운로드 받아 테이블 뷰에 표시하는 기능을 구현할 것입니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"우선 "},{"overridingTitleInlineContent":[{"type":"text","text":"Model.swift"}],"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/gfsusan\/NaverAPIExample\/blob\/master\/NaverAPIExample\/NaverAPIExample\/Model.swift","overridingTitle":"Model.swift"},{"type":"text","text":"의 getPosterImage() 메소드를 구현하고, "},{"overridingTitleInlineContent":[{"type":"text","text":"MoviesTableViewController.swift"}],"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/gfsusan\/NaverAPIExample\/blob\/master\/NaverAPIExample\/NaverAPIExample\/MoviesTableViewController.swift","overridingTitle":"MoviesTableViewController.swift"},{"type":"text","text":"의 tableView(cellForRowAt) 메소드를 살펴봅시다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Model.swift의 getPosterImage() 메소드"}]}]},{"type":"codeListing","syntax":"swift","code":["func getPosterImage() {","        guard imageURL != nil else {","            return","        }","        if let url = URL(string: imageURL!) {","            if let imgData = try? Data(contentsOf: url) {","                if let image = UIImage(data: imgData) {","                    self.image = image","                }","            }","        }","        return","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"여기서는 movie 객체의 imageURL이 존재하는지 먼저 확인한 다음, imageURL을 가지고 URL 객체를 생성하여 이를 가지고 이미지 데이터를 불러옵니다. 이미지 데이터를 사용해서 UIImage를 생성하고, self.image에 저장합니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"MoviesTableViewController.swift의 cellForRowAt() 메소드"}]}]},{"type":"codeListing","syntax":"swift","code":["override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {","        let cell = tableView.dequeueReusableCell(withIdentifier: \"movieCellIdentifier\", for: indexPath) as! MoviesTableViewCell","        let movie = movies[indexPath.row]","        ","        \/\/ cell 구성 부분 생략","        ","        \/\/ Async activity","        \/\/ 영화 포스터 이미지 불러오기","        if let posterImage = movie.image {","            cell.posterImageView.image = posterImage","        } else {","            cell.posterImageView.image = UIImage(named: \"noImage\")","            DispatchQueue.main.async(execute: {","                movie.getPosterImage()","                guard let thumbImage = movie.image else {","                    return","                }","                cell.posterImageView.image = thumbImage","            })","        }","        return cell","    }"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"1-4 : 포스터 이미지를 다운로드하기 위한 비동기 작업 큐를 생성합니다. 큐의 레이블은 “posterImage”로 하겠습니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"14-15: image가 이미 존재하면 즉시 이미지를 cell에 나타냅니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"16-19 : 이미지가 다운로드 되어 있지 않으면, 디폴트 이미지를 cell에 먼저 나타내고 posterImageQueue에 이미지 다운로드 작업을 넣습니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"20-22: 이미지 다운로드에 실패했을 경우를 대비하여 thumbImage에 guard를 두어 해당 블럭을 빠져나가도록 합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"23-25 : 이미지 다운로드 작업이 완료되면 포스터 이미지를 cell에 나타내는 작업을 main 큐에 넣습니다. 뷰(View) 업데이트 작업은 main 큐에서 하도록 "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/code_diagnostics\/main_thread_checker"},{"type":"text","text":"에 명시되어 있는데, 뷰 업데이트 작업을 메인 큐가 아닌 곳에서 했을 때 뷰가 업데이트 되지 않는 현상, 데이터 결함, 앱 충돌 등의 현상이 발생할 수 있기 때문입니다."}]}]}]},{"anchor":"STEP-3-SFSafariViewController-사용","level":2,"type":"heading","text":"STEP 3. SFSafariViewController 사용"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제 셀을 터치했을 때 영화의 세부정보를 볼 수 있는 사파리 뷰를 구성할 차례입니다."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"MoviesTableViewController.swift"}]}]},{"type":"codeListing","syntax":"swift","code":["override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {","    if let urlString = movies[indexPath.row].link {","        if let url = URL(string: urlString) {","            let svc = SFSafariViewController(url: url)","            self.present(svc, animated: true, completion: nil)","        }","    }","}"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"4: 해당 인덱스의 movie 객체의 urlString에 해당하는 주소를 가지고 URL 객체를 생성합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"5: SFSafariViewController 객체를 생성합니다. 사파리 뷰에서 영화 내용을 띄울 수 있도록 앞서 만든 URL 객체를 생성자에 기입합니다."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"6: 생성한 사파리 뷰를 Modal로 띄워 줍니다."}]}]}]},{"anchor":"마치며","level":2,"type":"heading","text":"마치며"},{"type":"paragraph","inlineContent":[{"type":"text","text":"지금까지 영화 검색 기능을 제공하는 네이버 오픈API에 대해서 살펴보았습니다. 네이버 오픈 API 서버에 Html 요청을 보내어 XML 데이터를 받아오고, 데이터를 분석하는 방법을 배웠습니다. 비동기작업의 개념을 애플리케이션에 적용하여 사용자 경험을 개선하는 방법도 배웠고, SFSafariViewController에 대해서도 간단하게 살펴보았습니다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"네이버 오픈 API는 영화 검색 기능 외에도 네아로(네이버 아이디로 로그인), 지도, 검색 기능 등이 있으며, Clova의 음성 인식 기술과 음성 합성 기술, 얼굴 인식 기술, Papago의 기계 번역 기술 등 다양한 기능 또한 제공합니다. 이번 포스트를 바탕으로 여러분의 애플리케이션을 더욱 더 빛나게 만들어 보시기 바랍니다!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"프로젝트 전체 코드는 GitHub의 NaverAPIExample를 통해 확인하실 수 있습니다. 본 포스트에 대한 제안 사항이나 궁금하신 점이 있다면 포스트 상단의 연락처로 언제든 연락 주시면 감사하겠습니다. 🙂"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"iPhoneSDK 튜토리얼 2, 2012년 4월, 윤성관 고준일) 참조"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/codershighdocument\/article_naver_api"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Naver_API","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Posted: 2018.08.20 | By: Sujin Kim (gfsusan@naver.com)"}],"kind":"article","metadata":{"roleHeading":"Article","title":"네이버 오픈 API를 이용한 영화 검색 애플리케이션 만들기","role":"article","modules":[{"name":"CodersHighDocument"}]},"hierarchy":{"paths":[["doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument"]]},"seeAlsoSections":[{"title":"Tech Blog","identifiers":["doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_UISearchController","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Tag_Cloud","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Create_PlaygroundBook","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Firebase_Timeline","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Firebase_Chat","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Calendar_Vot","doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_ReplayKit"],"generated":true}],"references":{"doc://CodersHighDocument/documentation/CodersHighDocument/Article_ReplayKit":{"role":"article","title":"ReplayKit을 이용해 여행 떠나기","abstract":[{"type":"text","text":"Posted: 2017.03.15 | By: Junyeong Yoo"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_ReplayKit","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_replaykit"},"https://github.com/gfsusan/NaverAPIExample/blob/master/NaverAPIExample/NaverAPIExample/Model.swift":{"title":"Model.swift","titleInlineContent":[{"type":"text","text":"Model.swift"}],"type":"link","identifier":"https:\/\/github.com\/gfsusan\/NaverAPIExample\/blob\/master\/NaverAPIExample\/NaverAPIExample\/Model.swift","url":"https:\/\/github.com\/gfsusan\/NaverAPIExample\/blob\/master\/NaverAPIExample\/NaverAPIExample\/Model.swift"},"naver3.png":{"alt":"Image","type":"image","identifier":"naver3.png","variants":[{"url":"\/images\/naver3.png","traits":["1x","light"]}]},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Create_PlaygroundBook":{"role":"article","title":"플레이그라운드 북 만들기","abstract":[{"type":"text","text":"Posted: 2018.03.18 | By: 윤성관"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Create_PlaygroundBook","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_create_playgroundbook"},"https://developers.naver.com/apps/#/list":{"title":"내 애플리케이션 항목","titleInlineContent":[{"type":"text","text":"내 애플리케이션 항목"}],"type":"link","identifier":"https:\/\/developers.naver.com\/apps\/#\/list","url":"https:\/\/developers.naver.com\/apps\/#\/list"},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Tag_Cloud":{"role":"article","title":"3d 스크롤이 가능한 태그 클라우드 만들기","abstract":[{"type":"text","text":"Posted: 2018.09.05 | By: 김소연 (github.com\/aa9390)"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Tag_Cloud","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_tag_cloud"},"naver5.png":{"alt":"Image","type":"image","identifier":"naver5.png","variants":[{"url":"\/images\/naver5.png","traits":["1x","light"]}]},"https://developers.naver.com/apps/#/register":{"title":"애플리케이션을 등록","titleInlineContent":[{"type":"text","text":"애플리케이션을 등록"}],"type":"link","identifier":"https:\/\/developers.naver.com\/apps\/#\/register","url":"https:\/\/developers.naver.com\/apps\/#\/register"},"naver4.png":{"alt":"Image","type":"image","identifier":"naver4.png","variants":[{"url":"\/images\/naver4.png","traits":["1x","light"]}]},"naver2.png":{"alt":"Image","type":"image","identifier":"naver2.png","variants":[{"url":"\/images\/naver2.png","traits":["1x","light"]}]},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Firebase_Timeline":{"role":"article","title":"Firebase를 이용하여 Timeline만들기","abstract":[{"type":"text","text":"Posted: 2018.01.13 | By: Byoungwook Park"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Firebase_Timeline","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_firebase_timeline"},"naver1.png":{"alt":"Image","type":"image","identifier":"naver1.png","variants":[{"url":"\/images\/naver1.png","traits":["1x","light"]}]},"https://github.com/gfsusan/NaverAPIExample":{"title":"GitHub","titleInlineContent":[{"type":"text","text":"GitHub"}],"type":"link","identifier":"https:\/\/github.com\/gfsusan\/NaverAPIExample","url":"https:\/\/github.com\/gfsusan\/NaverAPIExample"},"https://developer.apple.com/documentation/code_diagnostics/main_thread_checker":{"title":"Apple Developer","titleInlineContent":[{"type":"text","text":"Apple Developer"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/code_diagnostics\/main_thread_checker","url":"https:\/\/developer.apple.com\/documentation\/code_diagnostics\/main_thread_checker"},"https://developer.apple.com/documentation/uikit/uisearchcontroller":{"title":"Apple Developer","titleInlineContent":[{"type":"text","text":"Apple Developer"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/uisearchcontroller","url":"https:\/\/developer.apple.com\/documentation\/uikit\/uisearchcontroller"},"doc://CodersHighDocument/documentation/CodersHighDocument":{"role":"collection","title":"CodersHighDocument","abstract":[{"type":"text","text":"CodersHigh Document에 오신 것을 환영합니다!"},{"type":"text","text":" "},{"type":"text","text":"이곳에서는 CodersHigh에서 제작한 다양한 Article과 Tutorial을 확인할 수 있습니다."}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument","kind":"symbol","type":"topic","url":"\/documentation\/codershighdocument"},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Calendar_Vot":{"role":"article","title":"메시지 익스텐션을 이용한 Calendar-Vot 제작기","abstract":[{"type":"text","text":"Posted: 2017.03.17 | By: 염혜리(yhr7518@gmail.com)"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Calendar_Vot","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_calendar_vot"},"https://developers.naver.com/main/":{"title":"네이버 개발자 센터","titleInlineContent":[{"type":"text","text":"네이버 개발자 센터"}],"type":"link","identifier":"https:\/\/developers.naver.com\/main\/","url":"https:\/\/developers.naver.com\/main\/"},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_Firebase_Chat":{"role":"article","title":"Firebase를 이용하여 채팅창 만들기","abstract":[{"type":"text","text":"Posted: 2017.06.17 | By: Hyunsoo Park"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_Firebase_Chat","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_firebase_chat"},"https://github.com/gfsusan/NaverAPIExample/blob/master/NaverAPIExample/NaverAPIExample/SearchViewController.swift":{"title":"SearchViewController.swift","titleInlineContent":[{"type":"text","text":"SearchViewController.swift"}],"type":"link","identifier":"https:\/\/github.com\/gfsusan\/NaverAPIExample\/blob\/master\/NaverAPIExample\/NaverAPIExample\/SearchViewController.swift","url":"https:\/\/github.com\/gfsusan\/NaverAPIExample\/blob\/master\/NaverAPIExample\/NaverAPIExample\/SearchViewController.swift"},"https://github.com/gfsusan/NaverAPIExample/blob/master/NaverAPIExample/NaverAPIExample/MoviesTableViewController.swift":{"title":"MoviesTableViewController.swift","titleInlineContent":[{"type":"text","text":"MoviesTableViewController.swift"}],"type":"link","identifier":"https:\/\/github.com\/gfsusan\/NaverAPIExample\/blob\/master\/NaverAPIExample\/NaverAPIExample\/MoviesTableViewController.swift","url":"https:\/\/github.com\/gfsusan\/NaverAPIExample\/blob\/master\/NaverAPIExample\/NaverAPIExample\/MoviesTableViewController.swift"},"doc://CodersHighDocument/documentation/CodersHighDocument/Article_UISearchController":{"role":"article","title":"UISearchController로 검색 개발하기","abstract":[{"type":"text","text":"Posted: 2019.01.14 | By: Quino0627 (dongwook627@gmail.com)"}],"identifier":"doc:\/\/CodersHighDocument\/documentation\/CodersHighDocument\/Article_UISearchController","kind":"article","type":"topic","url":"\/documentation\/codershighdocument\/article_uisearchcontroller"}}}